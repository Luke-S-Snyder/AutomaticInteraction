    // function collectOrphanTicks(axes) {
    //     for (const axis of axes) {
    //         for (const tick of axis.ticks) {
    //             let newTicks = [];
  
    //             for (const tickMark of tick.marks) {
    //                 for (const mark of state.svgMarks) {
    //                     if (!mark.__tick__ && compareTickStyles(mark, tickMark)) {
    //                             mark.removeAttribute('__mark__');
    //                             mark.__tick__ = true;
    //                             newTicks.push({'label': null, marks: [mark]});
    //                         }
    //                 }
    //             }

    //             axis.ticks = axis.ticks.concat(newTicks);
    //         }
    //     }
    // }

    // function pruneTicks(axis, position) {
    //     for (const tick of axis.ticks) {
    //         for (const mark of tick.marks) {
    //             const [lh, rh] = computeBounds(mark, position);
    //             if (lh > tick.range[0] && rh < tick.range[1]) {
    //                 mark.setAttribute('__mark__', true);
    //                 mark.__tick__ = false;
    //             }
    //         }

    //         tick.marks = tick.marks.filter(d => d.__tick__);
    //     }
    // }


    // export function groupLabels(state) {
//     function offset(tick, text) {
//         if (!text) return Number.MAX_VALUE;

//         const axis = tick['ticks'][0].className.baseVal;
//         const xOffset = Math.abs((text.clientRect.left + text.clientRect.right) / 2 - tick['offset']);
//         const yOffset = Math.abs((text.clientRect.top + text.clientRect.bottom) / 2 - tick['offset']);

//         return axis.includes('x-axis') ? xOffset : yOffset;
//     }

//     const axes = [state.xAxis, state.yAxis];
//     for (const axis of axes) {
//         const ticks = axis.ticks;

//         for (const tick of ticks) {
//             for (const axisTextMark of state.axisTextMarks) {
//                 const currOffset = offset(tick, tick['label']);
//                 const newOffset = offset(tick, axisTextMark);

//                 if (newOffset < currOffset) {
//                     const axis = tick['ticks'][0].className.baseVal;
//                     const tie = Math.abs(newOffset - currOffset) < epsilon && tick['label']
//                     ? axis.includes('x-axis') ? tick['label'].clientRect.top - axisTextMark.clientRect.top
//                     : axisTextMark.clientRect.left - tick['label'].clientRect.left
//                     : 1; 

//                     if (tie > 0) tick['label'] = axisTextMark;
//                 }
//             }

//             tick['label'].tick = true;
//         }
//     }

//     state.axisTextMarks.filter(textMark => !textMark.tick).map(textMark => state.textMarks.push(textMark));
//     state.axisTextMarks = state.axisTextMarks.filter(textMark => textMark.tick);
// }

// export function groupAxis(axis, index) {
//     let positionMap = { };

//     for (let i = 0; i < axis.ticks.length; ++i) {
//         let offset = axis.ticks[i].clientRect[index];
//         axis.ticks[i].setAttribute('class', (index === 'left' ? 'x-axis' : 'y-axis') + ' tick');

//         offset in positionMap ? positionMap[offset]['ticks'].push(axis.ticks[i]) 
//         : positionMap[offset] = { 'label': null, 'ticks': [axis.ticks[i]] };
//     }

//     axis.ticks = [];
//     for (const [key, value] of Object.entries(positionMap)) {
//         value['offset'] = +key;
//         axis.ticks.push(value);
//     }

//     axis.ticks.sort((first, second) => +first['offset'] < +second['offset'] ? -1 : (+first['offset'] > +second['offset'] ? 1 : 0))
// }

// export function groupLegend(state) {
//     let titleX, titleY,
//         minX = 10000, maxY = 0;
//     for (const text of state.textMarks) {
//         if (text.clientRect.left < minX) {
//             minX = text.clientRect.left;
//             titleY = text;
//         }
//         if (text.clientRect.bottom > maxY) {
//             maxY = text.clientRect.bottom;
//             titleX = text;
//         }
//     }

//     if (titleY && Math.abs(minX - state.svg.clientRect.left) < 50) {
//         titleY.__title__ = true;
//         state.titles.y = titleY;
//     }
//     if (titleX && Math.abs(maxY - state.svg.clientRect.bottom) < 50) {
//         titleX.__title__ = true;
//         state.titles.x = titleX;    
//     } 

//     for (const text of state.textMarks) {
//         if (text.__title__) continue;

//         let textX = (text.clientRect.left + text.clientRect.right) / 2,
//             textY = (text.clientRect.top + text.clientRect.bottom) / 2;
//         let minPos = 10000, minMark;

//         for (const mark of state.svgMarks) {
//             let markX = (mark.clientRect.left + mark.clientRect.right) / 2,
//                 markY = (mark.clientRect.bottom + mark.clientRect.bottom) / 2;
//             // let diff = Math.abs(mark_x - text_x) + Math.abs(mark_y - text_y);
//             let diff = Math.abs(markX - textX) + Math.abs(markY - textY);

//             if (diff < minPos) {
//                 minPos = diff;
//                 minMark = mark;
//             }
//         }

//         minMark.removeAttribute('__mark__');
//         text.setAttribute('__legend__', true);
//         minMark.setAttribute('__legend__', 'true');
//         // min_mark.style['pointer-events'] = 'fill';
//         // console.log(min_mark)
//         state.legend.push({'label': text, 'glyph': minMark});
//     }
// }


                        // const xOffset = min([
                        //     Math.abs(tickBB.left - textBB.left),
                        //     Math.abs(tickBB.left - textBB.right),
                        //     Math.abs(tickBB.right - textBB.left),
                        //     Math.abs(tickBB.right - textBB.right)
                        // ]);
                        // const yOffset = min([
                        //     Math.abs(tickBB.top - textBB.top),
                        //     Math.abs(tickBB.top - textBB.bottom),
                        //     Math.abs(tickBB.bottom - textBB.top),
                        //     Math.abs(tickBB.bottom - textBB.bottom)
                        // ]);


                        // function pruneMarks() {
                        //     for (const mark of state.svgMarks) {
                        //         if (mark.clientRect.width >= state.xAxis.range[1] - state.xAxis.range[0] &&
                        //             mark.clientRect.height >= state.yAxis.range[0] - state.yAxis.range[1]) {
                        //                 mark.removeAttribute('__mark__');
                        //             }
                        //     }
                        //     state.svgMarks = state.svgMarks.filter(d => d.hasAttribute('__mark__'));
                        // }

                    //     <div id="ggplot" style="display:none;">
                    //     <svg width="720" height="450" id="ggplot">
                    //         <g>
                    //           <g class="tick">
                    //           <!-- <polyline points="39.86,344.04 395.87,344.04" id="svg_c9f6953f-273d-40cc-a962-d74ae6872c72_el_2" clip-path="url(#svg_c9f6953f-273d-40cc-a962-d74ae6872c72_cl_3)" fill="none" stroke="#EBEBEB" stroke-opacity="1" stroke-width="0.58" stroke-linejoin="round" stroke-linecap="butt"></polyline> -->
                    //           <!-- <polyline points="39.86,275.10 395.87,275.10" id="svg_c9f6953f-273d-40cc-a962-d74ae6872c72_el_3" clip-path="url(#svg_c9f6953f-273d-40cc-a962-d74ae6872c72_cl_3)" fill="none" stroke="#EBEBEB" stroke-opacity="1" stroke-width="0.58" stroke-linejoin="round" stroke-linecap="butt"></polyline> -->
                    //           <!-- <polyline points="39.86,206.16 395.87,206.16" id="svg_c9f6953f-273d-40cc-a962-d74ae6872c72_el_4" clip-path="url(#svg_c9f6953f-273d-40cc-a962-d74ae6872c72_cl_3)" fill="none" stroke="#EBEBEB" stroke-opacity="1" stroke-width="0.58" stroke-linejoin="round" stroke-linecap="butt"></polyline> -->
                    //           <!-- <polyline points="39.86,137.21 395.87,137.21" id="svg_c9f6953f-273d-40cc-a962-d74ae6872c72_el_5" clip-path="url(#svg_c9f6953f-273d-40cc-a962-d74ae6872c72_cl_3)" fill="none" stroke="#EBEBEB" stroke-opacity="1" stroke-width="0.58" stroke-linejoin="round" stroke-linecap="butt"></polyline> -->
                    //           <!-- <polyline points="39.86,68.27 395.87,68.27" id="svg_c9f6953f-273d-40cc-a962-d74ae6872c72_el_6" clip-path="url(#svg_c9f6953f-273d-40cc-a962-d74ae6872c72_cl_3)" fill="none" stroke="#EBEBEB" stroke-opacity="1" stroke-width="0.58" stroke-linejoin="round" stroke-linecap="butt"></polyline> -->
                    //           <!-- <polyline points="91.82,397.05 91.82,25.69" id="svg_c9f6953f-273d-40cc-a962-d74ae6872c72_el_7" clip-path="url(#svg_c9f6953f-273d-40cc-a962-d74ae6872c72_cl_3)" fill="none" stroke="#EBEBEB" stroke-opacity="1" stroke-width="0.58" stroke-linejoin="round" stroke-linecap="butt"></polyline> -->
                    //           <!-- <polyline points="238.19,397.05 238.19,25.69" id="svg_c9f6953f-273d-40cc-a962-d74ae6872c72_el_8" clip-path="url(#svg_c9f6953f-273d-40cc-a962-d74ae6872c72_cl_3)" fill="none" stroke="#EBEBEB" stroke-opacity="1" stroke-width="0.58" stroke-linejoin="round" stroke-linecap="butt"></polyline> -->
                    //           <!-- <polyline points="384.56,397.05 384.56,25.69" id="svg_c9f6953f-273d-40cc-a962-d74ae6872c72_el_9" clip-path="url(#svg_c9f6953f-273d-40cc-a962-d74ae6872c72_cl_3)" fill="none" stroke="#EBEBEB" stroke-opacity="1" stroke-width="0.58" stroke-linejoin="round" stroke-linecap="butt"></polyline> -->
                    //           <polyline points="39.86,378.51 395.87,378.51" id="svg_c9f6953f-273d-40cc-a962-d74ae6872c72_el_10" clip-path="url(#svg_c9f6953f-273d-40cc-a962-d74ae6872c72_cl_3)" fill="none" stroke="#EBEBEB" stroke-opacity="1" stroke-width="1.16" stroke-linejoin="round" stroke-linecap="butt"></polyline>
                    //           <polyline points="39.86,309.57 395.87,309.57" id="svg_c9f6953f-273d-40cc-a962-d74ae6872c72_el_11" clip-path="url(#svg_c9f6953f-273d-40cc-a962-d74ae6872c72_cl_3)" fill="none" stroke="#EBEBEB" stroke-opacity="1" stroke-width="1.16" stroke-linejoin="round" stroke-linecap="butt"></polyline>
                    //           <polyline points="39.86,240.63 395.87,240.63" id="svg_c9f6953f-273d-40cc-a962-d74ae6872c72_el_12" clip-path="url(#svg_c9f6953f-273d-40cc-a962-d74ae6872c72_cl_3)" fill="none" stroke="#EBEBEB" stroke-opacity="1" stroke-width="1.16" stroke-linejoin="round" stroke-linecap="butt"></polyline>
                    //           <polyline points="39.86,171.68 395.87,171.68" id="svg_c9f6953f-273d-40cc-a962-d74ae6872c72_el_13" clip-path="url(#svg_c9f6953f-273d-40cc-a962-d74ae6872c72_cl_3)" fill="none" stroke="#EBEBEB" stroke-opacity="1" stroke-width="1.16" stroke-linejoin="round" stroke-linecap="butt"></polyline>
                    //           <polyline points="39.86,102.74 395.87,102.74" id="svg_c9f6953f-273d-40cc-a962-d74ae6872c72_el_14" clip-path="url(#svg_c9f6953f-273d-40cc-a962-d74ae6872c72_cl_3)" fill="none" stroke="#EBEBEB" stroke-opacity="1" stroke-width="1.16" stroke-linejoin="round" stroke-linecap="butt"></polyline>
                    //           <polyline points="39.86,33.80 395.87,33.80" id="svg_c9f6953f-273d-40cc-a962-d74ae6872c72_el_15" clip-path="url(#svg_c9f6953f-273d-40cc-a962-d74ae6872c72_cl_3)" fill="none" stroke="#EBEBEB" stroke-opacity="1" stroke-width="1.16" stroke-linejoin="round" stroke-linecap="butt"></polyline>
                    //           <polyline points="165.00,397.05 165.00,25.69" id="svg_c9f6953f-273d-40cc-a962-d74ae6872c72_el_16" clip-path="url(#svg_c9f6953f-273d-40cc-a962-d74ae6872c72_cl_3)" fill="none" stroke="#EBEBEB" stroke-opacity="1" stroke-width="1.16" stroke-linejoin="round" stroke-linecap="butt"></polyline>
                    //           <polyline points="311.38,397.05 311.38,25.69" id="svg_c9f6953f-273d-40cc-a962-d74ae6872c72_el_17" clip-path="url(#svg_c9f6953f-273d-40cc-a962-d74ae6872c72_cl_3)" fill="none" stroke="#EBEBEB" stroke-opacity="1" stroke-width="1.16" stroke-linejoin="round" stroke-linecap="butt"></polyline>
                    //           <g clip-path="url(#svg_c9f6953f-273d-40cc-a962-d74ae6872c72_cl_4)">
                    //             <text x="20.41" y="381.94" id="svg_c9f6953f-273d-40cc-a962-d74ae6872c72_el_28" font-size="7.20pt" fill="#4D4D4D" fill-opacity="1" font-family="Open Sans">-30</text>
                    //           </g>
                    //           <g clip-path="url(#svg_c9f6953f-273d-40cc-a962-d74ae6872c72_cl_4)">
                    //             <text x="20.41" y="312.99" id="svg_c9f6953f-273d-40cc-a962-d74ae6872c72_el_29" font-size="7.20pt" fill="#4D4D4D" fill-opacity="1" font-family="Open Sans">-20</text>
                    //           </g>
                    //           <g clip-path="url(#svg_c9f6953f-273d-40cc-a962-d74ae6872c72_cl_4)">
                    //             <text x="20.41" y="244.05" id="svg_c9f6953f-273d-40cc-a962-d74ae6872c72_el_30" font-size="7.20pt" fill="#4D4D4D" fill-opacity="1" font-family="Open Sans">-10</text>
                    //           </g>
                    //           <g clip-path="url(#svg_c9f6953f-273d-40cc-a962-d74ae6872c72_cl_4)">
                    //             <text x="28.99" y="175.11" id="svg_c9f6953f-273d-40cc-a962-d74ae6872c72_el_31" font-size="7.20pt" fill="#4D4D4D" fill-opacity="1" font-family="Open Sans">0</text>
                    //           </g>
                    //           <g clip-path="url(#svg_c9f6953f-273d-40cc-a962-d74ae6872c72_cl_4)">
                    //             <text x="23.50" y="106.16" id="svg_c9f6953f-273d-40cc-a962-d74ae6872c72_el_32" font-size="7.20pt" fill="#4D4D4D" fill-opacity="1" font-family="Open Sans">10</text>
                    //           </g>
                    //           <g clip-path="url(#svg_c9f6953f-273d-40cc-a962-d74ae6872c72_cl_4)">
                    //             <text x="23.50" y="37.22" id="svg_c9f6953f-273d-40cc-a962-d74ae6872c72_el_33" font-size="7.20pt" fill="#4D4D4D" fill-opacity="1" font-family="Open Sans">20</text>
                    //           </g>
                    //           <g clip-path="url(#svg_c9f6953f-273d-40cc-a962-d74ae6872c72_cl_4)">
                    //             <text x="158.11" y="409.28" id="svg_c9f6953f-273d-40cc-a962-d74ae6872c72_el_34" font-size="7.20pt" fill="#4D4D4D" fill-opacity="1" font-family="Open Sans">Jan</text>
                    //           </g>
                    //           <g clip-path="url(#svg_c9f6953f-273d-40cc-a962-d74ae6872c72_cl_4)">
                    //             <text x="303.45" y="409.28" id="svg_c9f6953f-273d-40cc-a962-d74ae6872c72_el_35" font-size="7.20pt" fill="#4D4D4D" fill-opacity="1" font-family="Open Sans">Apr</text>
                    //           </g>
                    //           </g> 
                    //           <polyline points="56.04,168.46 57.66,165.57 59.29,170.79 60.92,169.18 62.54,170.78 64.17,168.11 65.80,166.44 67.42,160.11 69.05,159.13 70.68,153.91 72.30,149.98 73.93,146.06 75.55,150.54 77.18,154.48 78.81,152.62 80.43,149.40 82.06,142.74 83.69,147.53 85.31,151.97 86.94,149.23 88.57,149.17 90.19,149.13 91.82,144.99 93.44,150.90 95.07,155.21 96.70,150.70 98.32,150.55 99.95,155.78 101.58,159.94 103.20,164.43 104.83,170.52 106.46,170.72 108.08,166.15 109.71,167.12 111.33,171.96 112.96,170.26 114.59,172.97 116.21,178.11 117.84,178.96 119.47,183.59 121.09,190.33 122.72,192.07 124.35,189.03 125.97,193.95 127.60,198.71 129.22,204.28 130.85,204.02 132.48,208.38 134.10,212.63 135.73,216.33 137.36,218.19 138.98,223.21 140.61,222.91 142.24,228.85 143.86,231.72 145.49,237.47 147.11,234.05 148.74,232.80 150.37,238.02 151.99,244.31 153.62,241.12 155.25,245.62 156.87,245.38 158.50,245.82 160.13,243.06 161.75,247.98 163.38,251.58 165.00,255.44 166.63,260.50 168.26,257.96 169.88,257.54 171.51,258.00 173.14,264.49 174.76,260.27 176.39,261.41 178.02,257.03 179.64,261.48 181.27,258.37 182.90,254.99 184.52,261.29 186.15,267.50 187.77,265.54 189.40,271.67 191.03,267.94 192.65,267.29 194.28,268.82 195.91,272.04 197.53,274.78 199.16,276.71 200.79,279.15 202.41,276.92 204.04,279.99 205.66,276.93 207.29,283.46 208.92,287.01 210.54,290.67 212.17,296.83 213.80,299.92 215.42,305.94 217.05,307.88 218.68,312.14 220.30,306.00 221.93,303.13 223.55,298.60 225.18,305.01 226.81,298.54 228.43,303.30 230.06,310.19 231.69,316.87 233.31,310.53 234.94,308.62 236.57,306.58 238.19,306.97 239.82,309.58 241.44,310.11 243.07,312.98 244.70,314.29 246.32,307.71 247.95,309.90 249.58,309.25 251.20,314.70 252.83,313.11 254.46,313.99 256.08,310.37 257.71,309.20 259.33,303.25 260.96,303.40 262.59,307.10 264.21,302.49 265.84,303.77 267.47,306.43 269.09,310.70 270.72,305.45 272.35,309.59 273.97,313.69 275.60,316.96 277.22,320.87 278.85,326.23 280.48,330.48 282.10,333.20 283.73,336.17 285.36,336.11 286.98,336.99 288.61,332.24 290.24,338.44 291.86,332.53 293.49,337.92 295.11,335.37 296.74,335.84 298.37,329.03 299.99,332.86 301.62,335.36 303.25,328.50 304.87,331.12 306.50,334.35 308.13,333.15 309.75,335.44 311.38,340.30 313.00,343.36 314.63,349.61 316.26,349.29 317.88,347.74 319.51,350.06 321.14,350.45 322.76,344.77 324.39,341.91 326.02,347.68 327.64,347.38 329.27,351.66 330.89,355.80 332.52,350.98 334.15,355.89 335.77,355.64 337.40,355.69 339.03,357.60 340.65,355.56 342.28,352.84 343.91,354.71 345.53,360.77 347.16,366.00 348.78,366.44 350.41,372.20 352.04,367.85 353.66,370.83 355.29,365.22 356.92,371.67 358.54,365.10 360.17,366.27 361.80,371.75 363.42,372.01 365.05,373.53 366.67,380.17 368.30,374.74 369.93,373.36 371.55,376.22 373.18,380.17 374.81,375.53 376.43,370.84 378.06,370.18 379.69,368.34" id="svg_c9f6953f-273d-40cc-a962-d74ae6872c72_el_18" clip-path="url(#svg_c9f6953f-273d-40cc-a962-d74ae6872c72_cl_3)" fill="none" stroke="#440154" stroke-opacity="1" stroke-width="1.07" stroke-linejoin="round" stroke-linecap="butt" data-id="Amsonia selebica" title="Tomas O&amp;#39;Keefe" class=""></polyline>
                    //             <polyline points="56.04,175.58 57.66,172.38 59.29,172.58 60.92,166.53 62.54,167.67 64.17,161.78 65.80,155.57 67.42,158.76 69.05,152.78 70.68,146.49 72.30,149.38 73.93,147.72 75.55,142.72 77.18,144.35 78.81,145.66 80.43,150.32 82.06,148.77 83.69,145.32 85.31,138.67 86.94,143.32 88.57,145.33 90.19,142.76 91.82,139.05 93.44,144.38 95.07,147.81 96.70,152.15 98.32,153.16 99.95,147.57 101.58,142.98 103.20,145.47 104.83,142.47 106.46,139.71 108.08,140.23 109.71,141.05 111.33,143.44 112.96,146.47 114.59,144.92 116.21,140.65 117.84,134.26 119.47,132.53 121.09,133.62 122.72,140.30 124.35,146.00 125.97,151.27 127.60,154.75 129.22,153.14 130.85,158.23 132.48,160.78 134.10,155.78 135.73,157.88 137.36,159.89 138.98,159.48 140.61,155.36 142.24,152.63 143.86,152.47 145.49,150.92 147.11,152.78 148.74,153.56 150.37,155.38 151.99,153.60 153.62,152.94 155.25,159.42 156.87,159.89 158.50,155.53 160.13,153.88 161.75,156.66 163.38,161.77 165.00,162.75 166.63,157.17 168.26,163.93 169.88,162.51 171.51,167.90 173.14,173.58 174.76,175.55 176.39,169.10 178.02,174.24 179.64,176.05 181.27,171.59 182.90,177.24 184.52,176.17 186.15,181.05 187.77,180.93 189.40,182.10 191.03,186.75 192.65,183.85 194.28,180.16 195.91,176.71 197.53,177.59 199.16,182.16 200.79,186.36 202.41,185.98 204.04,180.33 205.66,177.07 207.29,183.24 208.92,176.63 210.54,180.49 212.17,176.59 213.80,170.93 215.42,168.36 217.05,161.85 218.68,159.11 220.30,155.00 221.93,159.41 223.55,156.21 225.18,152.47 226.81,156.71 228.43,151.98 230.06,158.46 231.69,159.79 233.31,165.54 234.94,159.73 236.57,155.11 238.19,150.65 239.82,155.46 241.44,159.80 243.07,159.35 244.70,165.64 246.32,161.39 247.95,156.70 249.58,153.79 251.20,157.46 252.83,157.57 254.46,161.35 256.08,157.55 257.71,159.36 259.33,157.15 260.96,158.22 262.59,159.48 264.21,158.68 265.84,164.74 267.47,159.50 269.09,162.10 270.72,157.69 272.35,163.55 273.97,156.75 275.60,161.18 277.22,158.60 278.85,155.93 280.48,159.31 282.10,158.74 283.73,161.75 285.36,164.54 286.98,162.44 288.61,168.70 290.24,164.25 291.86,171.06 293.49,166.30 295.11,165.51 296.74,162.88 298.37,162.29 299.99,160.88 301.62,159.40 303.25,153.10 304.87,156.99 306.50,156.06 308.13,160.92 309.75,162.00 311.38,155.23 313.00,151.94 314.63,154.27 316.26,156.52 317.88,160.28 319.51,164.82 321.14,159.82 322.76,161.82 324.39,156.64 326.02,163.01 327.64,161.00 329.27,159.80 330.89,153.54 332.52,151.97 334.15,152.73 335.77,156.33 337.40,159.27 339.03,155.27 340.65,162.03 342.28,155.37 343.91,154.29 345.53,155.27 347.16,149.72 348.78,147.29 350.41,148.02 352.04,149.96 353.66,149.00 355.29,147.65 356.92,153.31 358.54,147.70 360.17,154.20 361.80,152.41 363.42,154.65 365.05,158.06 366.67,152.61 368.30,150.71 369.93,154.93 371.55,152.96 373.18,146.64 374.81,139.80 376.43,138.79 378.06,135.81 379.69,140.41" id="svg_c9f6953f-273d-40cc-a962-d74ae6872c72_el_19" clip-path="url(#svg_c9f6953f-273d-40cc-a962-d74ae6872c72_cl_3)" fill="none" stroke="#482878" stroke-opacity="1" stroke-width="1.07" stroke-linejoin="round" stroke-linecap="butt" data-id="Anthoceros rubropilosa" title="Matias Gerlach I" class=""></polyline>
                    //             <polyline points="56.04,173.58 57.66,169.88 59.29,165.88 60.92,172.37 62.54,176.75 64.17,170.43 65.80,163.88 67.42,157.59 69.05,158.76 70.68,161.92 72.30,168.21 73.93,169.61 75.55,171.44 77.18,166.79 78.81,161.57 80.43,155.14 82.06,157.39 83.69,156.42 85.31,161.15 86.94,155.63 88.57,155.29 90.19,157.07 91.82,151.51 93.44,155.40 95.07,153.46 96.70,149.03 98.32,154.98 99.95,155.37 101.58,148.54 103.20,150.32 104.83,150.37 106.46,148.19 108.08,149.13 109.71,153.80 111.33,160.14 112.96,153.66 114.59,160.42 116.21,154.41 117.84,154.45 119.47,152.69 121.09,151.00 122.72,155.05 124.35,154.55 125.97,152.86 127.60,156.37 129.22,149.67 130.85,156.18 132.48,150.50 134.10,152.18 135.73,152.94 137.36,151.89 138.98,157.30 140.61,153.43 142.24,154.80 143.86,156.47 145.49,159.09 147.11,162.12 148.74,165.04 150.37,168.84 151.99,172.87 153.62,177.91 155.25,177.60 156.87,178.72 158.50,176.63 160.13,181.00 161.75,180.70 163.38,186.07 165.00,180.85 166.63,176.27 168.26,170.52 169.88,167.03 171.51,165.65 173.14,159.82 174.76,162.47 176.39,168.94 178.02,164.96 179.64,167.29 181.27,166.78 182.90,167.32 184.52,173.23 186.15,175.10 187.77,178.28 189.40,176.73 191.03,170.67 192.65,166.20 194.28,166.09 195.91,169.50 197.53,175.27 199.16,180.49 200.79,183.92 202.41,183.55 204.04,180.13 205.66,178.62 207.29,174.83 208.92,168.81 210.54,170.26 212.17,170.48 213.80,166.03 215.42,171.71 217.05,172.59 218.68,165.76 220.30,161.53 221.93,159.59 223.55,159.14 225.18,157.24 226.81,161.94 228.43,163.68 230.06,165.94 231.69,162.75 233.31,156.35 234.94,157.05 236.57,157.76 238.19,154.03 239.82,155.73 241.44,155.22 243.07,158.95 244.70,152.22 246.32,156.64 247.95,158.37 249.58,160.43 251.20,163.95 252.83,163.96 254.46,168.30 256.08,173.57 257.71,179.95 259.33,176.07 260.96,176.80 262.59,174.04 264.21,168.92 265.84,168.13 267.47,168.21 269.09,166.60 270.72,166.47 272.35,170.65 273.97,177.47 275.60,180.34 277.22,174.61 278.85,170.80 280.48,173.34 282.10,172.26 283.73,176.16 285.36,173.89 286.98,170.14 288.61,176.36 290.24,177.50 291.86,181.59 293.49,185.79 295.11,183.58 296.74,182.51 298.37,184.55 299.99,182.46 301.62,179.51 303.25,183.56 304.87,183.74 306.50,180.06 308.13,178.15 309.75,179.95 311.38,175.70 313.00,174.15 314.63,174.44 316.26,173.65 317.88,172.74 319.51,179.06 321.14,172.73 322.76,175.48 324.39,179.88 326.02,174.91 327.64,176.97 329.27,179.86 330.89,177.96 332.52,173.23 334.15,170.27 335.77,176.05 337.40,182.22 339.03,185.28 340.65,186.20 342.28,180.28 343.91,176.88 345.53,180.69 347.16,180.59 348.78,182.35 350.41,184.17 352.04,178.30 353.66,181.92 355.29,185.29 356.92,180.13 358.54,173.63 360.17,176.50 361.80,174.52 363.42,169.91 365.05,165.66 366.67,160.50 368.30,164.10 369.93,163.54 371.55,165.89 373.18,165.01 374.81,167.75 376.43,174.46 378.06,180.97 379.69,181.38" id="svg_c9f6953f-273d-40cc-a962-d74ae6872c72_el_20" clip-path="url(#svg_c9f6953f-273d-40cc-a962-d74ae6872c72_cl_3)" fill="none" stroke="#3E4A89" stroke-opacity="1" stroke-width="1.07" stroke-linejoin="round" stroke-linecap="butt" data-id="Antirhea penangiana" title="Clovis Schuppe" class=""></polyline>
                    //             <polyline points="56.04,172.21 57.66,168.45 59.29,164.08 60.92,158.76 62.54,159.29 64.17,163.93 65.80,158.30 67.42,157.65 69.05,159.05 70.68,155.72 72.30,155.87 73.93,150.41 75.55,148.79 77.18,147.52 78.81,148.53 80.43,155.37 82.06,161.38 83.69,165.06 85.31,171.47 86.94,176.52 88.57,173.69 90.19,176.66 91.82,172.79 93.44,173.48 95.07,166.97 96.70,161.01 98.32,156.63 99.95,161.10 101.58,165.12 103.20,162.11 104.83,166.16 106.46,172.24 108.08,168.15 109.71,169.10 111.33,175.19 112.96,179.82 114.59,180.09 116.21,184.23 117.84,189.57 119.47,192.15 121.09,197.97 122.72,195.88 124.35,199.75 125.97,204.25 127.60,197.63 129.22,190.82 130.85,195.27 132.48,201.90 134.10,208.05 135.73,209.03 137.36,215.77 138.98,215.05 140.61,218.21 142.24,213.05 143.86,210.28 145.49,215.74 147.11,218.87 148.74,221.22 150.37,215.68 151.99,216.91 153.62,211.67 155.25,204.99 156.87,206.21 158.50,200.69 160.13,200.44 161.75,195.47 163.38,202.06 165.00,202.21 166.63,195.93 168.26,194.34 169.88,193.97 171.51,191.45 173.14,195.70 174.76,189.75 176.39,186.20 178.02,192.19 179.64,191.71 181.27,196.39 182.90,202.47 184.52,200.04 186.15,194.30 187.77,193.03 189.40,188.31 191.03,186.90 192.65,189.79 194.28,195.80 195.91,202.63 197.53,199.39 199.16,192.80 200.79,191.26 202.41,189.05 204.04,193.83 205.66,187.35 207.29,189.73 208.92,189.70 210.54,190.30 212.17,186.15 213.80,189.62 215.42,189.30 217.05,189.26 218.68,184.46 220.30,177.95 221.93,179.14 223.55,182.22 225.18,188.81 226.81,188.53 228.43,194.68 230.06,199.68 231.69,202.82 233.31,198.18 234.94,198.97 236.57,192.22 238.19,189.25 239.82,193.76 241.44,191.82 243.07,189.09 244.70,185.32 246.32,181.95 247.95,187.72 249.58,190.54 251.20,191.13 252.83,193.18 254.46,199.27 256.08,201.29 257.71,197.05 259.33,202.01 260.96,201.69 262.59,207.05 264.21,201.88 265.84,197.62 267.47,195.51 269.09,193.27 270.72,194.92 272.35,198.01 273.97,199.93 275.60,206.07 277.22,204.40 278.85,210.18 280.48,203.53 282.10,204.91 283.73,208.06 285.36,202.09 286.98,196.81 288.61,203.02 290.24,207.68 291.86,206.33 293.49,205.39 295.11,207.37 296.74,208.47 298.37,203.35 299.99,208.83 301.62,212.75 303.25,214.21 304.87,216.67 306.50,222.48 308.13,229.34 309.75,231.49 311.38,232.35 313.00,225.62 314.63,219.58 316.26,220.32 317.88,222.99 319.51,216.38 321.14,215.90 322.76,222.12 324.39,227.74 326.02,233.10 327.64,238.30 329.27,243.68 330.89,247.98 332.52,249.66 334.15,250.22 335.77,253.46 337.40,257.40 339.03,254.26 340.65,259.72 342.28,263.23 343.91,263.69 345.53,257.38 347.16,253.98 348.78,257.28 350.41,260.00 352.04,254.78 353.66,255.13 355.29,254.52 356.92,260.34 358.54,255.80 360.17,259.27 361.80,257.94 363.42,264.54 365.05,267.96 366.67,268.31 368.30,270.85 369.93,265.44 371.55,262.57 373.18,260.80 374.81,258.02 376.43,261.15 378.06,267.80 379.69,270.81" id="svg_c9f6953f-273d-40cc-a962-d74ae6872c72_el_21" clip-path="url(#svg_c9f6953f-273d-40cc-a962-d74ae6872c72_cl_3)" fill="none" stroke="#31688E" stroke-opacity="1" stroke-width="1.07" stroke-linejoin="round" stroke-linecap="butt" data-id="Goebelia brideliifolius" title="Chancy Kautzer" class=""></polyline>
                    //             <polyline points="56.04,175.84 57.66,180.97 59.29,175.25 60.92,176.07 62.54,169.79 64.17,164.71 65.80,158.33 67.42,164.65 69.05,158.12 70.68,152.69 72.30,155.84 73.93,162.29 75.55,162.58 77.18,161.80 78.81,157.10 80.43,160.85 82.06,162.75 83.69,163.93 85.31,163.65 86.94,165.83 88.57,168.80 90.19,173.02 91.82,175.84 93.44,170.55 95.07,166.88 96.70,161.14 98.32,155.25 99.95,152.51 101.58,158.27 103.20,154.39 104.83,152.15 106.46,158.15 108.08,154.68 109.71,154.57 111.33,148.44 112.96,150.87 114.59,148.10 116.21,143.41 117.84,143.10 119.47,149.19 121.09,145.48 122.72,144.89 124.35,146.55 125.97,150.22 127.60,150.06 129.22,150.20 130.85,150.29 132.48,153.25 134.10,150.03 135.73,154.06 137.36,150.99 138.98,152.49 140.61,147.38 142.24,150.43 143.86,149.08 145.49,148.92 147.11,142.04 148.74,137.65 150.37,137.15 151.99,143.38 153.62,145.01 155.25,142.09 156.87,145.48 158.50,151.75 160.13,148.00 161.75,152.13 163.38,159.01 165.00,153.82 166.63,151.95 168.26,149.12 169.88,154.88 171.51,155.48 173.14,157.06 174.76,159.25 176.39,165.64 178.02,158.95 179.64,162.54 181.27,168.56 182.90,165.45 184.52,169.14 186.15,164.28 187.77,157.57 189.40,157.43 191.03,159.97 192.65,161.12 194.28,157.99 195.91,162.90 197.53,167.38 199.16,163.95 200.79,170.02 202.41,174.52 204.04,171.93 205.66,174.07 207.29,174.75 208.92,177.68 210.54,174.83 212.17,175.08 213.80,178.82 215.42,172.80 217.05,165.94 218.68,165.00 220.30,167.44 221.93,165.68 223.55,170.25 225.18,169.11 226.81,175.39 228.43,177.01 230.06,170.26 231.69,164.57 233.31,171.03 234.94,171.74 236.57,174.18 238.19,179.76 239.82,186.47 241.44,185.38 243.07,190.08 244.70,185.62 246.32,189.12 247.95,192.99 249.58,192.57 251.20,199.22 252.83,198.23 254.46,197.20 256.08,198.47 257.71,199.63 259.33,196.74 260.96,198.23 262.59,204.73 264.21,200.00 265.84,203.23 267.47,207.71 269.09,203.67 270.72,207.05 272.35,204.94 273.97,199.78 275.60,193.72 277.22,191.67 278.85,185.09 280.48,184.62 282.10,180.68 283.73,175.48 285.36,170.04 286.98,173.09 288.61,179.98 290.24,179.35 291.86,179.84 293.49,180.87 295.11,183.64 296.74,186.91 298.37,184.84 299.99,190.10 301.62,190.74 303.25,187.91 304.87,187.15 306.50,188.38 308.13,190.70 309.75,185.26 311.38,183.99 313.00,189.00 314.63,188.05 316.26,188.38 317.88,183.07 319.51,188.94 321.14,194.16 322.76,200.01 324.39,202.95 326.02,207.21 327.64,204.44 329.27,200.65 330.89,201.77 332.52,197.31 334.15,201.71 335.77,203.77 337.40,201.83 339.03,207.76 340.65,202.54 342.28,206.32 343.91,209.04 345.53,209.83 347.16,213.66 348.78,209.34 350.41,215.63 352.04,221.02 353.66,214.71 355.29,208.06 356.92,213.06 358.54,208.03 360.17,211.83 361.80,217.52 363.42,221.12 365.05,218.51 366.67,214.18 368.30,216.74 369.93,211.11 371.55,210.22 373.18,216.87 374.81,210.47 376.43,210.62 378.06,207.91 379.69,205.33" id="svg_c9f6953f-273d-40cc-a962-d74ae6872c72_el_22" clip-path="url(#svg_c9f6953f-273d-40cc-a962-d74ae6872c72_cl_3)" fill="none" stroke="#26828E" stroke-opacity="1" stroke-width="1.07" stroke-linejoin="round" stroke-linecap="butt" data-id="Heterostemon levynsiae" title="Rashawn Dare V" class=""></polyline>
                    //             <polyline points="56.04,172.19 57.66,175.63 59.29,181.64 60.92,186.36 62.54,186.00 64.17,191.96 65.80,188.77 67.42,195.26 69.05,200.17 70.68,200.88 72.30,198.81 73.93,194.81 75.55,188.50 77.18,192.73 78.81,190.24 80.43,183.69 82.06,181.07 83.69,187.54 85.31,183.85 86.94,185.19 88.57,182.26 90.19,188.25 91.82,193.10 93.44,189.73 95.07,190.99 96.70,193.71 98.32,192.87 99.95,187.90 101.58,189.91 103.20,195.73 104.83,200.39 106.46,201.87 108.08,197.88 109.71,202.63 111.33,201.40 112.96,204.65 114.59,208.29 116.21,202.94 117.84,208.00 119.47,205.39 121.09,205.73 122.72,204.26 124.35,208.25 125.97,212.35 127.60,217.62 129.22,220.60 130.85,214.25 132.48,214.28 134.10,211.95 135.73,215.45 137.36,215.11 138.98,211.61 140.61,207.33 142.24,213.55 143.86,217.81 145.49,212.88 147.11,212.45 148.74,208.59 150.37,214.02 151.99,219.83 153.62,219.75 155.25,217.59 156.87,215.45 158.50,209.53 160.13,216.37 161.75,223.24 163.38,229.81 165.00,235.61 166.63,236.46 168.26,231.70 169.88,226.95 171.51,220.74 173.14,219.50 174.76,218.17 176.39,217.14 178.02,211.68 179.64,213.66 181.27,207.89 182.90,209.56 184.52,213.68 186.15,219.35 187.77,222.80 189.40,228.75 191.03,232.54 192.65,239.41 194.28,244.58 195.91,241.78 197.53,244.84 199.16,249.54 200.79,256.05 202.41,257.67 204.04,253.70 205.66,259.74 207.29,254.13 208.92,256.79 210.54,258.48 212.17,262.40 213.80,257.17 215.42,258.65 217.05,262.63 218.68,261.03 220.30,267.68 221.93,266.08 223.55,269.60 225.18,266.99 226.81,268.28 228.43,262.72 230.06,269.25 231.69,270.19 233.31,276.81 234.94,280.02 236.57,273.30 238.19,277.01 239.82,274.75 241.44,267.98 243.07,263.17 244.70,260.48 246.32,254.84 247.95,260.26 249.58,253.89 251.20,255.09 252.83,251.32 254.46,253.10 256.08,249.34 257.71,245.49 259.33,238.83 260.96,242.34 262.59,244.17 264.21,239.57 265.84,239.19 267.47,241.09 269.09,238.57 270.72,244.88 272.35,238.52 273.97,232.21 275.60,230.46 277.22,228.87 278.85,226.18 280.48,221.20 282.10,227.75 283.73,221.90 285.36,217.43 286.98,222.58 288.61,216.64 290.24,214.60 291.86,217.47 293.49,212.52 295.11,205.87 296.74,210.94 298.37,213.38 299.99,208.76 301.62,206.47 303.25,211.26 304.87,212.90 306.50,208.00 308.13,204.80 309.75,209.84 311.38,215.06 313.00,212.12 314.63,205.62 316.26,199.62 317.88,203.42 319.51,196.72 321.14,197.27 322.76,202.72 324.39,200.45 326.02,202.19 327.64,198.03 329.27,198.59 330.89,197.96 332.52,195.00 334.15,190.30 335.77,196.05 337.40,199.88 339.03,199.29 340.65,203.43 342.28,202.28 343.91,200.89 345.53,194.74 347.16,196.63 348.78,196.47 350.41,202.07 352.04,203.27 353.66,197.96 355.29,201.76 356.92,196.33 358.54,192.20 360.17,188.66 361.80,188.92 363.42,190.28 365.05,189.49 366.67,191.43 368.30,187.77 369.93,193.09 371.55,189.84 373.18,184.27 374.81,188.09 376.43,190.90 378.06,197.16 379.69,193.13" id="svg_c9f6953f-273d-40cc-a962-d74ae6872c72_el_23" clip-path="url(#svg_c9f6953f-273d-40cc-a962-d74ae6872c72_cl_3)" fill="none" stroke="#1F9E89" stroke-opacity="1" stroke-width="1.07" stroke-linejoin="round" stroke-linecap="butt" data-id="Hygrohypnum nudicaulis" title="Belton Parker" class=""></polyline>
                    //             <polyline points="56.04,176.14 57.66,180.83 59.29,175.78 60.92,181.33 62.54,183.73 64.17,184.67 65.80,179.40 67.42,181.97 69.05,187.42 70.68,186.05 72.30,191.74 73.93,195.12 75.55,190.90 77.18,195.19 78.81,192.88 80.43,195.96 82.06,193.45 83.69,193.02 85.31,197.81 86.94,204.67 88.57,205.93 90.19,212.70 91.82,215.93 93.44,211.22 95.07,217.66 96.70,222.61 98.32,216.02 99.95,221.42 101.58,227.68 103.20,220.95 104.83,214.28 106.46,220.16 108.08,219.38 109.71,213.97 111.33,217.66 112.96,223.20 114.59,228.55 116.21,233.10 117.84,233.08 119.47,233.89 121.09,228.77 122.72,232.18 124.35,238.68 125.97,241.23 127.60,244.64 129.22,248.39 130.85,249.21 132.48,243.18 134.10,243.18 135.73,247.88 137.36,254.54 138.98,249.01 140.61,247.90 142.24,251.30 143.86,254.79 145.49,254.83 147.11,260.63 148.74,257.18 150.37,259.93 151.99,256.69 153.62,257.44 155.25,261.28 156.87,255.69 158.50,252.37 160.13,252.47 161.75,257.81 163.38,260.76 165.00,263.77 166.63,267.52 168.26,273.89 169.88,272.46 171.51,277.44 173.14,283.01 174.76,279.91 176.39,275.90 178.02,270.68 179.64,275.95 181.27,276.48 182.90,273.71 184.52,280.35 186.15,278.87 187.77,276.95 189.40,273.16 191.03,274.32 192.65,270.23 194.28,269.62 195.91,273.69 197.53,270.71 199.16,271.36 200.79,275.96 202.41,272.61 204.04,278.25 205.66,277.22 207.29,281.77 208.92,282.38 210.54,282.11 212.17,287.31 213.80,292.44 215.42,295.51 217.05,290.94 218.68,296.61 220.30,292.33 221.93,295.30 223.55,290.00 225.18,287.71 226.81,285.09 228.43,286.11 230.06,287.83 231.69,293.30 233.31,298.72 234.94,293.23 236.57,291.09 238.19,286.51 239.82,290.12 241.44,293.13 243.07,293.68 244.70,288.26 246.32,283.26 247.95,277.87 249.58,276.80 251.20,278.92 252.83,275.40 254.46,275.76 256.08,277.75 257.71,283.38 259.33,277.66 260.96,279.70 262.59,277.50 264.21,275.06 265.84,280.52 267.47,286.79 269.09,279.95 270.72,282.74 272.35,282.34 273.97,277.09 275.60,270.33 277.22,265.85 278.85,269.09 280.48,270.50 282.10,267.94 283.73,273.02 285.36,275.38 286.98,271.21 288.61,277.20 290.24,279.27 291.86,284.42 293.49,278.46 295.11,285.28 296.74,289.33 298.37,283.55 299.99,277.22 301.62,278.26 303.25,274.01 304.87,272.57 306.50,266.44 308.13,268.37 309.75,270.21 311.38,264.31 313.00,269.79 314.63,267.66 316.26,271.80 317.88,266.00 319.51,268.11 321.14,274.41 322.76,280.63 324.39,282.62 326.02,284.22 327.64,281.03 329.27,275.07 330.89,279.53 332.52,277.58 334.15,275.16 335.77,279.96 337.40,277.16 339.03,272.11 340.65,270.26 342.28,265.28 343.91,261.99 345.53,264.93 347.16,258.11 348.78,259.21 350.41,254.73 352.04,254.01 353.66,255.92 355.29,253.25 356.92,253.52 358.54,250.57 360.17,255.86 361.80,252.96 363.42,249.18 365.05,250.12 366.67,248.97 368.30,252.22 369.93,250.40 371.55,243.78 373.18,245.77 374.81,241.07 376.43,237.41 378.06,230.69 379.69,230.70" id="svg_c9f6953f-273d-40cc-a962-d74ae6872c72_el_24" clip-path="url(#svg_c9f6953f-273d-40cc-a962-d74ae6872c72_cl_3)" fill="none" stroke="#35B779" stroke-opacity="1" stroke-width="1.07" stroke-linejoin="round" stroke-linecap="butt" data-id="Lecythis nutans" title="Jerrie Macejkovic" class=""></polyline>
                    //             <polyline points="56.04,176.01 57.66,169.72 59.29,171.88 60.92,171.90 62.54,177.12 64.17,172.61 65.80,178.15 67.42,174.54 69.05,180.10 70.68,173.77 72.30,179.75 73.93,185.35 75.55,184.52 77.18,183.27 78.81,185.61 80.43,179.86 82.06,182.35 83.69,187.89 85.31,193.34 86.94,190.64 88.57,192.46 90.19,189.12 91.82,185.52 93.44,181.88 95.07,177.06 96.70,176.47 98.32,181.42 99.95,182.17 101.58,176.28 103.20,182.50 104.83,183.25 106.46,184.85 108.08,179.82 109.71,186.03 111.33,189.53 112.96,192.90 114.59,188.40 116.21,187.53 117.84,188.41 119.47,191.48 121.09,185.38 122.72,182.30 124.35,180.92 125.97,174.89 127.60,171.99 129.22,175.15 130.85,181.97 132.48,181.29 134.10,187.14 135.73,193.60 137.36,195.13 138.98,196.38 140.61,194.86 142.24,200.46 143.86,194.58 145.49,188.76 147.11,181.93 148.74,184.42 150.37,186.96 151.99,191.70 153.62,194.99 155.25,196.75 156.87,200.80 158.50,195.94 160.13,191.05 161.75,189.18 163.38,192.17 165.00,195.64 166.63,199.83 168.26,196.31 169.88,191.97 171.51,193.52 173.14,199.70 174.76,203.52 176.39,197.18 178.02,203.85 179.64,199.54 181.27,204.11 182.90,209.82 184.52,205.65 186.15,202.84 187.77,199.95 189.40,199.46 191.03,193.60 192.65,199.79 194.28,198.89 195.91,198.37 197.53,200.48 199.16,202.48 200.79,196.78 202.41,192.50 204.04,186.50 205.66,190.81 207.29,184.66 208.92,184.15 210.54,184.58 212.17,178.29 213.80,180.85 215.42,178.71 217.05,181.88 218.68,186.28 220.30,185.35 221.93,190.45 223.55,190.47 225.18,188.97 226.81,193.18 228.43,195.99 230.06,200.75 231.69,195.49 233.31,198.55 234.94,193.87 236.57,194.98 238.19,198.41 239.82,195.97 241.44,201.09 243.07,196.19 244.70,192.02 246.32,187.44 247.95,187.04 249.58,182.22 251.20,187.90 252.83,183.00 254.46,179.61 256.08,185.92 257.71,189.96 259.33,186.15 260.96,186.49 262.59,184.38 264.21,187.33 265.84,186.48 267.47,180.86 269.09,180.79 270.72,180.72 272.35,176.56 273.97,177.97 275.60,177.69 277.22,174.28 278.85,172.28 280.48,174.98 282.10,174.60 283.73,168.29 285.36,168.37 286.98,175.20 288.61,177.31 290.24,182.82 291.86,187.04 293.49,182.64 295.11,179.30 296.74,176.47 298.37,180.99 299.99,179.65 301.62,174.81 303.25,169.90 304.87,175.36 306.50,170.69 308.13,171.38 309.75,177.43 311.38,183.46 313.00,182.32 314.63,183.65 316.26,179.99 317.88,180.99 319.51,174.53 321.14,169.42 322.76,166.42 324.39,160.52 326.02,166.28 327.64,162.49 329.27,161.89 330.89,168.75 332.52,168.10 334.15,163.93 335.77,167.90 337.40,167.56 339.03,166.85 340.65,167.96 342.28,166.35 343.91,171.53 345.53,171.76 347.16,176.62 348.78,173.50 350.41,168.86 352.04,172.88 353.66,166.59 355.29,164.28 356.92,161.01 358.54,156.36 360.17,155.24 361.80,153.69 363.42,157.93 365.05,162.59 366.67,156.82 368.30,159.08 369.93,164.40 371.55,157.57 373.18,151.21 374.81,144.95 376.43,144.73 378.06,138.59 379.69,139.82" id="svg_c9f6953f-273d-40cc-a962-d74ae6872c72_el_25" clip-path="url(#svg_c9f6953f-273d-40cc-a962-d74ae6872c72_cl_3)" fill="none" stroke="#6DCD59" stroke-opacity="1" stroke-width="1.07" stroke-linejoin="round" stroke-linecap="butt" data-id="Malva leprosa" title="Emerson Considine-Doyle" class=""></polyline>
                    //             <polyline points="56.04,171.62 57.66,175.67 59.29,179.93 60.92,185.21 62.54,188.72 64.17,186.18 65.80,183.73 67.42,181.91 69.05,184.15 70.68,183.19 72.30,184.44 73.93,178.99 75.55,182.37 77.18,187.75 78.81,184.31 80.43,187.67 82.06,194.40 83.69,196.96 85.31,197.02 86.94,190.69 88.57,195.66 90.19,200.26 91.82,198.48 93.44,197.57 95.07,200.12 96.70,196.64 98.32,198.71 99.95,195.93 101.58,201.57 103.20,205.30 104.83,201.99 106.46,198.26 108.08,197.76 109.71,197.79 111.33,196.81 112.96,190.27 114.59,193.17 116.21,189.91 117.84,185.33 119.47,181.93 121.09,181.42 122.72,180.87 124.35,180.92 125.97,174.38 127.60,173.38 129.22,175.01 130.85,178.87 132.48,173.94 134.10,170.77 135.73,172.38 137.36,171.52 138.98,177.49 140.61,175.49 142.24,171.38 143.86,167.82 145.49,164.56 147.11,169.49 148.74,166.64 150.37,164.20 151.99,165.86 153.62,161.19 155.25,164.95 156.87,158.81 158.50,164.63 160.13,168.08 161.75,171.75 163.38,169.64 165.00,167.41 166.63,169.98 168.26,172.50 169.88,165.66 171.51,170.84 173.14,175.50 174.76,177.36 176.39,173.69 178.02,176.56 179.64,180.89 181.27,182.65 182.90,178.71 184.52,173.85 186.15,170.28 187.77,167.44 189.40,171.09 191.03,169.64 192.65,166.35 194.28,169.58 195.91,175.76 197.53,181.76 199.16,175.92 200.79,172.67 202.41,170.50 204.04,176.10 205.66,177.11 207.29,174.31 208.92,171.27 210.54,176.95 212.17,172.20 213.80,175.33 215.42,176.22 217.05,179.25 218.68,183.04 220.30,176.16 221.93,181.57 223.55,176.89 225.18,173.24 226.81,169.13 228.43,165.20 230.06,171.38 231.69,178.27 233.31,176.38 234.94,178.96 236.57,181.82 238.19,183.35 239.82,177.44 241.44,173.64 243.07,172.87 244.70,167.66 246.32,163.02 247.95,168.21 249.58,164.91 251.20,164.34 252.83,165.13 254.46,159.81 256.08,157.00 257.71,162.48 259.33,164.35 260.96,169.94 262.59,174.55 264.21,170.16 265.84,163.41 267.47,166.09 269.09,165.85 270.72,170.92 272.35,169.87 273.97,168.81 275.60,174.14 277.22,178.48 278.85,184.25 280.48,186.92 282.10,186.94 283.73,188.69 285.36,186.23 286.98,188.07 288.61,181.20 290.24,187.83 291.86,188.72 293.49,182.78 295.11,180.93 296.74,178.08 298.37,172.93 299.99,174.34 301.62,172.26 303.25,172.89 304.87,166.83 306.50,169.72 308.13,164.99 309.75,162.17 311.38,158.70 313.00,164.59 314.63,164.34 316.26,169.60 317.88,174.89 319.51,175.48 321.14,171.87 322.76,176.36 324.39,171.47 326.02,171.31 327.64,173.69 329.27,175.24 330.89,178.28 332.52,182.73 334.15,180.29 335.77,184.21 337.40,179.74 339.03,177.78 340.65,171.66 342.28,170.08 343.91,171.77 345.53,173.64 347.16,174.09 348.78,170.51 350.41,172.97 352.04,172.03 353.66,167.42 355.29,164.20 356.92,161.46 358.54,167.00 360.17,168.51 361.80,171.99 363.42,172.93 365.05,171.80 366.67,168.49 368.30,165.54 369.93,163.14 371.55,168.50 373.18,164.58 374.81,159.06 376.43,163.50 378.06,158.22 379.69,161.60" id="svg_c9f6953f-273d-40cc-a962-d74ae6872c72_el_26" clip-path="url(#svg_c9f6953f-273d-40cc-a962-d74ae6872c72_cl_3)" fill="none" stroke="#B4DE2C" stroke-opacity="1" stroke-width="1.07" stroke-linejoin="round" stroke-linecap="butt" data-id="Splachnobryum capuronii" title="Sage Schroeder" class=""></polyline>
                    //             <polyline points="56.04,169.09 57.66,167.53 59.29,173.96 60.92,169.11 62.54,162.74 64.17,160.46 65.80,165.70 67.42,160.22 69.05,155.91 70.68,153.39 72.30,154.60 73.93,151.89 75.55,154.71 77.18,157.78 78.81,153.90 80.43,149.21 82.06,150.20 83.69,145.85 85.31,152.74 86.94,147.97 88.57,144.24 90.19,143.30 91.82,142.36 93.44,149.25 95.07,153.52 96.70,152.82 98.32,150.26 99.95,143.47 101.58,140.73 103.20,138.87 104.83,137.79 106.46,131.59 108.08,129.61 109.71,122.77 111.33,125.74 112.96,127.64 114.59,121.53 116.21,122.48 117.84,118.29 119.47,118.71 121.09,116.52 122.72,118.85 124.35,123.04 125.97,117.93 127.60,115.12 129.22,109.97 130.85,106.43 132.48,108.21 134.10,110.54 135.73,105.50 137.36,99.67 138.98,99.53 140.61,105.01 142.24,106.34 143.86,112.67 145.49,106.87 147.11,113.41 148.74,109.24 150.37,104.31 151.99,104.35 153.62,100.91 155.25,98.37 156.87,103.76 158.50,104.13 160.13,110.03 161.75,107.81 163.38,108.60 165.00,104.34 166.63,108.05 168.26,113.55 169.88,108.93 171.51,109.64 173.14,113.03 174.76,107.07 176.39,108.89 178.02,106.66 179.64,107.08 181.27,104.31 182.90,105.21 184.52,105.23 186.15,102.36 187.77,96.56 189.40,98.76 191.03,93.92 192.65,95.58 194.28,93.78 195.91,100.53 197.53,99.86 199.16,100.45 200.79,100.89 202.41,94.42 204.04,91.34 205.66,89.28 207.29,92.49 208.92,95.61 210.54,101.96 212.17,102.64 213.80,109.25 215.42,104.30 217.05,100.08 218.68,94.68 220.30,93.77 221.93,89.26 223.55,83.57 225.18,87.68 226.81,85.94 228.43,83.06 230.06,87.59 231.69,88.32 233.31,88.31 234.94,88.61 236.57,89.97 238.19,93.01 239.82,90.54 241.44,86.53 243.07,80.61 244.70,77.08 246.32,81.60 247.95,86.76 249.58,80.76 251.20,77.84 252.83,75.01 254.46,78.24 256.08,74.85 257.71,70.73 259.33,76.77 260.96,72.09 262.59,74.86 264.21,68.64 265.84,63.43 267.47,57.02 269.09,54.95 270.72,51.43 272.35,50.06 273.97,55.33 275.60,61.45 277.22,57.89 278.85,54.09 280.48,55.17 282.10,50.51 283.73,50.57 285.36,53.35 286.98,53.55 288.61,48.16 290.24,42.57 291.86,47.93 293.49,51.66 295.11,53.39 296.74,47.65 298.37,45.60 299.99,52.01 301.62,48.95 303.25,52.92 304.87,53.79 306.50,52.85 308.13,56.67 309.75,53.72 311.38,47.12 313.00,53.87 314.63,57.92 316.26,64.04 317.88,60.83 319.51,61.40 321.14,58.07 322.76,59.29 324.39,55.67 326.02,52.64 327.64,55.00 329.27,51.33 330.89,55.56 332.52,57.33 334.15,53.23 335.77,59.13 337.40,61.54 339.03,62.57 340.65,67.35 342.28,68.12 343.91,64.06 345.53,64.61 347.16,64.54 348.78,60.33 350.41,62.05 352.04,67.65 353.66,65.28 355.29,66.58 356.92,61.98 358.54,61.99 360.17,64.64 361.80,62.55 363.42,67.58 365.05,61.06 366.67,54.47 368.30,55.64 369.93,51.77 371.55,54.75 373.18,60.63 374.81,55.40 376.43,61.87 378.06,66.77 379.69,68.05" id="svg_c9f6953f-273d-40cc-a962-d74ae6872c72_el_27" clip-path="url(#svg_c9f6953f-273d-40cc-a962-d74ae6872c72_cl_3)" fill="none" stroke="#FDE725" stroke-opacity="1" stroke-width="1.07" stroke-linejoin="round" stroke-linecap="butt" data-id="Stenandrium mandakatense" title="Matteo Bradtke" class=""></polyline>
                    //           <g clip-path="url(#svg_c9f6953f-273d-40cc-a962-d74ae6872c72_cl_4)">
                    //             <text x="205.36" y="423.14" id="svg_c9f6953f-273d-40cc-a962-d74ae6872c72_el_36" font-size="9.00pt" font-family="Open Sans">date</text>
                    //           </g>
                    //           <g clip-path="url(#svg_c9f6953f-273d-40cc-a962-d74ae6872c72_cl_4)">
                    //             <text transform="translate(14.55,225.32) rotate(-90.00)" id="svg_c9f6953f-273d-40cc-a962-d74ae6872c72_el_37" font-size="9.00pt" font-family="Open Sans">sales</text>
                    //           </g>
                    //           <g clip-path="url(#svg_c9f6953f-273d-40cc-a962-d74ae6872c72_cl_4)">
                    //             <text x="413.80" y="126.27" id="svg_c9f6953f-273d-40cc-a962-d74ae6872c72_el_38" font-size="9.00pt" font-family="Open Sans">species</text>
                    //           </g>
                    //           <line x1="415.53" y1="142.32" x2="429.35" y2="142.32" id="svg_c9f6953f-273d-40cc-a962-d74ae6872c72_el_39" clip-path="url(#svg_c9f6953f-273d-40cc-a962-d74ae6872c72_cl_4)" stroke="#440154" stroke-opacity="1" stroke-width="1.07" stroke-linejoin="round" stroke-linecap="butt" fill="#440154" fill-opacity="1"></line>
                    //           <line x1="415.53" y1="159.60" x2="429.35" y2="159.60" id="svg_c9f6953f-273d-40cc-a962-d74ae6872c72_el_40" clip-path="url(#svg_c9f6953f-273d-40cc-a962-d74ae6872c72_cl_4)" stroke="#482878" stroke-opacity="1" stroke-width="1.07" stroke-linejoin="round" stroke-linecap="butt" fill="#482878" fill-opacity="1"></line>
                    //           <line x1="415.53" y1="176.88" x2="429.35" y2="176.88" id="svg_c9f6953f-273d-40cc-a962-d74ae6872c72_el_41" clip-path="url(#svg_c9f6953f-273d-40cc-a962-d74ae6872c72_cl_4)" stroke="#3E4A89" stroke-opacity="1" stroke-width="1.07" stroke-linejoin="round" stroke-linecap="butt" fill="#3E4A89" fill-opacity="1"></line>
                    //           <line x1="415.53" y1="194.16" x2="429.35" y2="194.16" id="svg_c9f6953f-273d-40cc-a962-d74ae6872c72_el_42" clip-path="url(#svg_c9f6953f-273d-40cc-a962-d74ae6872c72_cl_4)" stroke="#31688E" stroke-opacity="1" stroke-width="1.07" stroke-linejoin="round" stroke-linecap="butt" fill="#31688E" fill-opacity="1"></line>
                    //           <line x1="415.53" y1="211.44" x2="429.35" y2="211.44" id="svg_c9f6953f-273d-40cc-a962-d74ae6872c72_el_43" clip-path="url(#svg_c9f6953f-273d-40cc-a962-d74ae6872c72_cl_4)" stroke="#26828E" stroke-opacity="1" stroke-width="1.07" stroke-linejoin="round" stroke-linecap="butt" fill="#26828E" fill-opacity="1"></line>
                    //           <line x1="415.53" y1="228.72" x2="429.35" y2="228.72" id="svg_c9f6953f-273d-40cc-a962-d74ae6872c72_el_44" clip-path="url(#svg_c9f6953f-273d-40cc-a962-d74ae6872c72_cl_4)" stroke="#1F9E89" stroke-opacity="1" stroke-width="1.07" stroke-linejoin="round" stroke-linecap="butt" fill="#1F9E89" fill-opacity="1"></line>
                    //           <line x1="415.53" y1="246.00" x2="429.35" y2="246.00" id="svg_c9f6953f-273d-40cc-a962-d74ae6872c72_el_45" clip-path="url(#svg_c9f6953f-273d-40cc-a962-d74ae6872c72_cl_4)" stroke="#35B779" stroke-opacity="1" stroke-width="1.07" stroke-linejoin="round" stroke-linecap="butt" fill="#35B779" fill-opacity="1"></line>
                    //           <line x1="415.53" y1="263.28" x2="429.35" y2="263.28" id="svg_c9f6953f-273d-40cc-a962-d74ae6872c72_el_46" clip-path="url(#svg_c9f6953f-273d-40cc-a962-d74ae6872c72_cl_4)" stroke="#6DCD59" stroke-opacity="1" stroke-width="1.07" stroke-linejoin="round" stroke-linecap="butt" fill="#6DCD59" fill-opacity="1"></line>
                    //           <line x1="415.53" y1="280.56" x2="429.35" y2="280.56" id="svg_c9f6953f-273d-40cc-a962-d74ae6872c72_el_47" clip-path="url(#svg_c9f6953f-273d-40cc-a962-d74ae6872c72_cl_4)" stroke="#B4DE2C" stroke-opacity="1" stroke-width="1.07" stroke-linejoin="round" stroke-linecap="butt" fill="#B4DE2C" fill-opacity="1"></line>
                    //           <line x1="415.53" y1="297.84" x2="429.35" y2="297.84" id="svg_c9f6953f-273d-40cc-a962-d74ae6872c72_el_48" clip-path="url(#svg_c9f6953f-273d-40cc-a962-d74ae6872c72_cl_4)" stroke="#FDE725" stroke-opacity="1" stroke-width="1.07" stroke-linejoin="round" stroke-linecap="butt" fill="#FDE725" fill-opacity="1"></line>
                    //           <g clip-path="url(#svg_c9f6953f-273d-40cc-a962-d74ae6872c72_cl_4)">
                    //             <text x="437.06" y="145.75" id="svg_c9f6953f-273d-40cc-a962-d74ae6872c72_el_49" font-size="7.20pt" font-family="Open Sans">Amsonia selebica</text>
                    //           </g>
                    //           <g clip-path="url(#svg_c9f6953f-273d-40cc-a962-d74ae6872c72_cl_4)">
                    //             <text x="437.06" y="163.03" id="svg_c9f6953f-273d-40cc-a962-d74ae6872c72_el_50" font-size="7.20pt" font-family="Open Sans">Anthoceros rubropilosa</text>
                    //           </g>
                    //           <g clip-path="url(#svg_c9f6953f-273d-40cc-a962-d74ae6872c72_cl_4)">
                    //             <text x="437.06" y="180.31" id="svg_c9f6953f-273d-40cc-a962-d74ae6872c72_el_51" font-size="7.20pt" font-family="Open Sans">Antirhea penangiana</text>
                    //           </g>
                    //           <g clip-path="url(#svg_c9f6953f-273d-40cc-a962-d74ae6872c72_cl_4)">
                    //             <text x="437.06" y="197.59" id="svg_c9f6953f-273d-40cc-a962-d74ae6872c72_el_52" font-size="7.20pt" font-family="Open Sans">Goebelia brideliifolius</text>
                    //           </g>
                    //           <g clip-path="url(#svg_c9f6953f-273d-40cc-a962-d74ae6872c72_cl_4)">
                    //             <text x="437.06" y="214.87" id="svg_c9f6953f-273d-40cc-a962-d74ae6872c72_el_53" font-size="7.20pt" font-family="Open Sans">Heterostemon levynsiae</text>
                    //           </g>
                    //           <g clip-path="url(#svg_c9f6953f-273d-40cc-a962-d74ae6872c72_cl_4)">
                    //             <text x="437.06" y="232.15" id="svg_c9f6953f-273d-40cc-a962-d74ae6872c72_el_54" font-size="7.20pt" font-family="Open Sans">Hygrohypnum nudicaulis</text>
                    //           </g>
                    //           <g clip-path="url(#svg_c9f6953f-273d-40cc-a962-d74ae6872c72_cl_4)">
                    //             <text x="437.06" y="249.43" id="svg_c9f6953f-273d-40cc-a962-d74ae6872c72_el_55" font-size="7.20pt" font-family="Open Sans">Lecythis nutans</text>
                    //           </g>
                    //           <g clip-path="url(#svg_c9f6953f-273d-40cc-a962-d74ae6872c72_cl_4)">
                    //             <text x="437.06" y="266.71" id="svg_c9f6953f-273d-40cc-a962-d74ae6872c72_el_56" font-size="7.20pt" font-family="Open Sans">Malva leprosa</text>
                    //           </g>
                    //           <g clip-path="url(#svg_c9f6953f-273d-40cc-a962-d74ae6872c72_cl_4)">
                    //             <text x="437.06" y="283.99" id="svg_c9f6953f-273d-40cc-a962-d74ae6872c72_el_57" font-size="7.20pt" font-family="Open Sans">Splachnobryum capuronii</text>
                    //           </g>
                    //           <g clip-path="url(#svg_c9f6953f-273d-40cc-a962-d74ae6872c72_cl_4)">
                    //             <text x="437.06" y="301.27" id="svg_c9f6953f-273d-40cc-a962-d74ae6872c72_el_58" font-size="7.20pt" font-family="Open Sans">Stenandrium mandakatense</text>
                    //           </g>
                    //         </g>
                    //       </svg>
                    // </div>


    

                    // function collectOrphanTicks(orphanTicks) {
                    //     for (const {alignment, tick: orphanTick} of orphanTicks) {
                    //         const isX = alignment === Top || alignment === Bottom;
                    //         const axis = isX ? state.xAxis : state.yAxis;
                    //         const orphanBB = orphanTick.getBoundingClientRect();
                    //         let matched = false;
                    //         orphanTick._role = 'orphan-tick';
                            
                    //         for (let i = 0; i < axis.ticks.length; ++i) {
                    //             for (const tick of axis.ticks[i].marks) {
                    //                 const tickBB = tick.getBoundingClientRect();
                    //                 const sizeMatch = isX ? orphanBB.height === tickBB.height : orphanBB.width === tickBB.width;
                    //                 const offset = isX ? Math.abs(orphanBB.left + orphanBB.width / 2 - tickBB.left - tickBB.width / 2)
                    //                 : Math.abs(orphanBB.top + orphanBB.height / 2 - tickBB.top - tickBB.height / 2);
                                    
                    //                 if (offset < epsilon && sizeMatch) {
                    //                     matched = true;
                    //                     // const orphanStyle = window.getComputedStyle(orphanTick);
                    //                     // const tickStyle = window.getComputedStyle(tick);
                
                    //                     // if (parseInt(orphanStyle.strokeWidth, 10) < parseInt(tickStyle.strokeWidth, 10) || 
                    //                     //     flattenRGB(orphanStyle.stroke) > flattenRGB(tickStyle.stroke)) {
                    //                     //     axis.ticks[i].marks = axis.ticks[i].marks.filter(d => d !== tick);
                    //                     //     axis.ticks[i].marks.push(orphanTick);
                    //                     // }
                    //                 }
                    //             }
                    //         }
                
                    //         if (!matched) {
                    //             axis.ticks.push({label: null, marks: [orphanTick]});
                    //         }
                    //     }
                    // }


            // function analyzeAxis(element, state, transform) {
//     if (!element) return;
//     if (element.className && (element.className.baseVal === Background || 
//         element.className.baseVal === Foreground)) return;

//     if (element.nodeName === SvgGroup) {
//         parseTransform(element, true, transform);
//     } else if (element.nodeName === Text) {
//         extractElementInformation(element, transform);
//         state.axisTextMarks.push(element);
//         element.style['pointer-events'] = 'none';
//         element.style['user-select'] = 'none';
//     } else if (markTypes.includes(element.nodeName)) {
//         extractElementInformation(element, transform);
//         let isX = element.hasAttribute('x2') ? +element.getAttribute('x2') : 0;
//         isX = !isX ? Math.abs(element.clientRect.bottom - element.clientRect.top) < 1 : isX;
        
//         let isY = element.hasAttribute('y2') ? +element.getAttribute('y2') : 0;
//         isY = !isY ? Math.abs(element.clientRect.left - element.clientRect.right) < 1 : isY;

//         if (isX) state.yAxis.ticks.push(element);
//         if (isY) state.xAxis.ticks.push(element);
//     }

//     for (const child of element.childNodes) {
//         analyzeAxis(child, state, new Transform(transform));
//     }
// }

// export function inferMarkAttributes(state) { 
//     for (const mark of state.svgMarks) {
//         if (mark.nodeName !== Path || (!state.xAxis.ticks.length && !state.yAxis.ticks.length) || 
//            (mark.nodeName === Path && mark.type === Ellipse)) {
//             if (false && mark.__data__) {
//                 if (typeof mark.__data__ === 'string' || typeof mark.__data__ === 'number') {
//                     var iterable = mark.__data__;
//                     break;
//                 }

//                 let hasDatum = 'datum' in mark.__data__;
//                 let hasProperties = 'properties' in mark.__data__;
//                 let hasData = 'data' in mark.__data__;
            
//                 var iterable = hasDatum ? mark.__data__.datum 
//                 : hasProperties ? mark.__data__.properties 
//                 : hasData ? mark.__data__.data : mark.__data__;
//             } else {
//                 const svgRect = state.svg.getBoundingClientRect();
//                 let markX = (mark.getBoundingClientRect().left + mark.getBoundingClientRect().right) / 2
//                     // - state.xAxis.ticks[0]['ticks'][0].parentNode._global_transform[0]
//                     - svgRect.left;
//                 let markY = (mark.getBoundingClientRect().top + mark.getBoundingClientRect().bottom) / 2
//                     // - state.yAxis.ticks[0]['ticks'][0].parentNode._global_transform[1]
//                     - svgRect.top;

//                 if (state.legends[0]) {
//                     var legend1 = state.legends[0].marks[0];
//                     var legend2 = state.legends[0].marks[state.legends[0].marks.length - 1];
//                     var label1 = legend1.label.__data__ ? legend1.label.__data__ : +legend1.label.innerHTML;
//                     var label2 = legend2.label.__data__ ? legend2.label.__data__ : +legend2.label.innerHTML;
//                     // console.log([legend1, legend2])
//                     var legendScale = scaleLinear().domain(state.xAxis.title ? [label1, label2] : [label2, label1])
//                         .range(state.xAxis.title ? [legend1.mark.getBoundingClientRect().height, legend2.mark.getBoundingClientRect().height]
//                         : [legend2.mark.getBoundingClientRect().height, legend1.mark.getBoundingClientRect().height]);
//                     if (!state.legends[0].scale) state.legends[0].scale = legendScale;
//                 }

//                 if (state.xAxis.title && state.yAxis.title) {
//                     var iterable = {
//                         [state.xAxis.title.innerHTML]: state.xAxis.ordinal.length ? markX : state.xAxis.scale.invert(markX),
//                         [state.yAxis.title.innerHTML]: markY
//                     }
//                 } else {
//                     var iterable = {};
//                 }
                
//                 if (state.legends[0]) {
//                     if (!state.legends[0].title) {
//                         var title = 'legend';
//                     } else {
//                         var title = state.legends[0].title.innerHTML;
//                     }
//                     iterable[title] = legendScale.invert(mark.getBoundingClientRect().height).toFixed(2)
//                 }
//             }

//             mark.style['pointer-events'] = 'fill';
//             mark.__inferred__data__ = iterable;
//         }
//     }
// }

// var legend1 = state.legends[0].marks[0];
// var legend2 = state.legends[0].marks[state.legends[0].marks.length - 1];
// var label1 = legend1.label.__data__ ? legend1.label.__data__ : +legend1.label.innerHTML;
// var label2 = legend2.label.__data__ ? legend2.label.__data__ : +legend2.label.innerHTML;
// // console.log([legend1, legend2])
// var legendScale = scaleLinear().domain(state.xAxis.title ? [label1, label2] : [label2, label1])
//     .range(state.xAxis.title ? [legend1.mark.getBoundingClientRect().height, legend2.mark.getBoundingClientRect().height]
//     : [legend2.mark.getBoundingClientRect().height, legend1.mark.getBoundingClientRect().height]);
// if (!state.legends[0].scale) state.legends[0].scale = legendScale;


// function filter(state, x, y, width, height, append=false) {
//     // document.getElementById("filterMode").style['opacity'] = 1;
//     // document.getElementById("filterMode").style['display'] = 'block';

//     for (const mark of state.svgMarks) {
//         if (mark.style["visibility"] === "hidden" || mark.hasAttribute("__legend__")) continue;

//         if ((mark.type === "line" || mark.type === "polygon" || mark.type === "polyline") && state.xAxis.ticks.length && state.yAxis.ticks.length) {
//             break;
//             state.interactions.brush.active = true;
//             select.applyBrush(state, x, y, width, height);
//             return;
//         }
        
//         if (state.xAxis.ordinal.length || (!state.xAxis.ticks.length && !state.yAxis.ticks.length)) {
//             var brush_x_start = x;
//             var brush_x_end = x + +width;
//             var brush_y_end = y + +height;
//             var brush_y_start = y;

//             let bb = mark.getBoundingClientRect();
//             var data_x = (+bb.left + +bb.right) / 2;
//             var data_y = (+bb.top + +bb.bottom) / 2;
//         } else {
//             // var brush_x_start = state.xAxis.scale.invert(x);
//             // var brush_x_end = state.xAxis.scale.invert(x + +width);
//             // var brush_y_end = state.yAxis.scale.invert(y);
//             // var brush_y_start = state.yAxis.scale.invert(y + +height);
//             var brush_x_start = x;
//             var brush_x_end = x + +width;
//             var brush_y_end = y + +height;
//             var brush_y_start = y;
//             // console.log(brush_x_start, brush_x_end, brush_y_start, brush_y_end)
//             // console.log(brush_x_end, brush_y_start, brush_y_end)
//             let bb = mark.getBoundingClientRect();
//             let sbb = state.svg.getBoundingClientRect();
//             var data_x = (state.xAxis.scale.invert(+bb.left - +sbb.left) + state.xAxis.scale.invert(+bb.right - +sbb.left)) / 2;
//             var data_y = (state.yAxis.scale.invert(+bb.top - +sbb.top) + state.yAxis.scale.invert(+bb.bottom - +sbb.top)) / 2;
//             // console.log(data_x, data_y)
//         }

//         if (data_x < brush_x_start || data_x > brush_x_end || data_y < brush_y_start || data_y > brush_y_end) {
//             if (!append) {
//                 mark.setAttribute("opacity", 0.25);
//             }
//         } else {
//             mark.setAttribute("opacity", 1);
//         }
//     }
// }


// //     // Tooltip
// //     let mousedown = false;
// //     state.svg.addEventListener('mousedown', function(event) {
// //         mousedown = true;
// //     });
// //     state.svg.addEventListener('mouseup', function(event) {
// //         mousedown = false;
// //     });
//     // state.svg.addEventListener('mousemove', function(event) {
//     //     if (!mousedown) document.getElementById("modebar").style['visibility'] = 'visible';

//     //     if (state.interactions.pan.flag) {
//     //         let left_bound = state.svg_marks[0]._global_transform[0] + SVG.state().svg.getBoundingClientRect().left;
//     //         let top_bound = state.svg_marks[0]._global_transform[1] + SVG.state().svg.getBoundingClientRect().top;

//     //         let x_axis = event.clientX - left_bound > state.x_axis.range[0], 
//     //             y_axis = event.clientY - top_bound < state.y_axis.range[0];

//     //         state.svg.style['cursor'] = x_axis && !y_axis ? 'ew-resize' :
//     //             !x_axis && y_axis ? 'ns-resize' : 'move';
//     //     }
//     // });
//     // state.svg.addEventListener('mouseleave', function(event) {
//     //     if (event.clientX <= +state.svg.getBoundingClientRect().left || event.clientX >= +state.svg.getBoundingClientRect().right) {
//     //         document.getElementById("modebar").style['visibility'] = 'hidden';
//     //     }
//     // });

// function handleMenu(state) {
//             let mousedown = false;
//     state.svg.addEventListener('mousedown', function(event) {
//         mousedown = true;
//     });
//     state.svg.addEventListener('mouseup', function(event) {
//         mousedown = false;
//     });
//     state.svg.addEventListener('mousemove', function(event) {
//         if (!mousedown) document.getElementById("modebar").style['visibility'] = 'visible';

//         if (state.interactions.pan.flag) {
//             let left_bound = state.svg.getBoundingClientRect().left;
//             let top_bound = state.svg.getBoundingClientRect().top;

//             let x_axis = event.clientX - left_bound > state.xAxis.range[0], 
//                 y_axis = event.clientY - top_bound < state.yAxis.range[0];

//             state.svg.style['cursor'] = x_axis && !y_axis ? 'ew-resize' :
//                 !x_axis && y_axis ? 'ns-resize' : 'move';
//         }
//     });
//     state.svg.addEventListener('mouseleave', function(event) {
//         if (event.clientX <= +state.svg.getBoundingClientRect().left || event.clientX >= +state.svg.getBoundingClientRect().right) {
//             document.getElementById("modebar").style['visibility'] = 'hidden';
//         }
//     });

//     let pan_elem = document.getElementById("panMode");
//     let brush_elem = document.getElementById("brushMode");
//     let filter_elem = document.getElementById("filterMode");
//     let annotate_elem = document.getElementById("annotateMode");

//     pan_elem.addEventListener("click", function(event) {
//         if (state.svg.parentNode.style['visibility'] === 'hidden') return;

//         pan_elem.style['opacity'] = +pan_elem.style['opacity'] === 0.4 ? 1 : 0.4;
//         brush_elem.style['opacity'] = 0.4;
//         annotate_elem.style['opacity'] = 0.4;

//         state.interactions.pan.flag = !state.interactions.pan.flag;
//         state.interactions.brush.flag = false;
//         state.interactions.annotate.flag = false;
//         state.svg.style['cursor'] = 'move';

//         // document.getElementById("logfile").innerHTML += "Click " + state.svg.id + " " +
//             // (+pan_elem.style['opacity'] === 0.4 ? "disable" : "enable") + " pan <br/>";
//     });
//     brush_elem.addEventListener("click", function(event) {
//         if (state.svg.parentNode.style['visibility'] === 'hidden') return;

//         brush_elem.style['opacity'] = +brush_elem.style['opacity'] === 0.4 ? 1 : 0.4;
//         pan_elem.style['opacity'] = 0.4;
//         annotate_elem.style['opacity'] = 0.4;

//         state.interactions.annotate.flag = false;
//         state.interactions.pan.flag = false;
//         state.interactions.brush.flag = !state.interactions.brush.flag;
//         state.svg.style['cursor'] = 'crosshair';

//         // document.getElementById("logfile").innerHTML += "Click " + state.svg.id + " " +
//             // (+brush_elem.style['opacity'] === 0.4 ? "disable" : "enable") + " brush <br/>";
//     });

//     filter_elem.addEventListener("click", function(event) {
//         if (state.svg.parentNode.style['visibility'] === 'hidden') return;
        
//         // let append = false;
//         // for (const mark of state.svg_marks) {
//         //     if (mark.style['visibility'])
//         // }
//         // if (!state.interactions.filter.active || !document.querySelectorAll('[visibility="hidden"]')) {
//             state.interactions.brush.flag = false;
//         state.interactions.annotate.flag = false;
//         // } 
//         let el;
//         let needsFilter = false;
//         for (const mark of state.svgMarks) {
//             if (mark.style['visibility'] === 'visible' && +mark.getAttribute('opacity') !== 1) {
//                 needsFilter = true;
//                 break;
//             }
//         }

//         if (needsFilter) state.interactions.filter.active = true; 
//         else state.interactions.filter.active = !state.interactions.filter.active; 

//         for (const mark of state.svgMarks) {
//             if (mark.hasAttribute("__legend__")) continue;
//             if (state.interactions.filter.active) {
//                 mark.style['visibility'] = +mark.getAttribute("opacity") === 1 && (!mark.style['visibility'] || mark.style['visibility'] === 'visible') ? 'visible' : 'hidden';
//                 mark.style['pointer-events'] = +mark.getAttribute("opacity") === 1 ? 'fill' : 'none';
//             } else {
//                 mark.style['visibility'] = 'visible';
//                 mark.style['pointer-events'] = 'fill';
//             }
//             // mark.style['visibility'] = state.interactions.filter.active ? 
//             //     +mark.getAttribute("opacity") === 1 ? 'visible' : 'hidden'
//             //     : 'visible'
//             // if (mark.style['visibility'] === 'visible') el = mark;

//             // for (const tick of state.x_axis.ticks) {
//             //     let offset = (+mark.getBoundingClientRect().left + +mark.getBoundingClientRect().right) / 2;
//             //     let t_offset = (+tick['ticks'][0].getBoundingClientRect().left + +tick['ticks'][0].getBoundingClientRect().right) / 2;
//             //     let l_offset = (+tick['label'].getBoundingClientRect().left + +tick['label'].getBoundingClientRect().right) / 2;
//             //     if (Math.abs(offset - t_offset) < 1 && mark.style['visibility'] !== 'visible') {
//             //         // tick['label'].style['visibility'] = 'hidden';
//             //         tick['ticks'][0].style['visibility'] = 'hidden';
//             //     }
//             //     if (Math.abs(offset - l_offset) < 20 && mark.style['visibility'] !== 'visible') {
//             //         tick['label'].style['visibility'] = 'hidden';
//             //     }
//             // }
//         }

//         // for (const l of state.legend) {
//         //     console.log(l)
//         //     if (window.getComputedStyle(l['glyph']).fill !== window.getComputedStyle(el).stroke) {
//         //         l['label'].setAttribute("opacity", 0);
//         //         l['glyph'].setAttribute("opacity", 0);
//         //     } else {
//         //         l['label'].setAttribute("opacity", 1);
//         //         l['glyph'].setAttribute("opacity", 1);
//         //         l['label'].style['visibility'] = 'visible';
//         //         l['glyph'].style['visibility'] = 'visible';
//         //     }
//         // }

//         // document.getElementById("logfile").innerHTML += "Click " + state.svg.id + " " +
//             // (state.interactions.filter.active ? "enable" : "disable") + " filter <br/>";
//     });
//     annotate_elem.addEventListener("click", function(event) {
//         if (state.svg.parentNode.style['visibility'] === 'hidden') return;

//         annotate_elem.style['opacity'] = +annotate_elem.style['opacity'] === 0.4 ? 1 : 0.4;
//         pan_elem.style['opacity'] = 0.4;
//         brush_elem.style['opacity'] = 0.4;

//         state.interactions.brush.flag = false;
//         state.interactions.pan.flag = false;
//         state.interactions.annotate.flag = !state.interactions.annotate.flag;
//         state.svg.style['cursor'] = 'pointer';

//         // +annotate_elem.style['opacity'] === 0.4 ? annotate.unbind() : annotate.bind(SVG);
//         // document.getElementById("logfile").innerHTML += "Click " + state.svg.id + " " +
//             // (+annotate_elem.style['opacity'] === 0.4 ? "disable" : "enable") + " annotate <br/>";
//     });

// }

// function unfilter(state) {
//     state.interactions.brush.active = false;
//     let append = false;

//     for (const mark of state.svgMarks) {
//         mark.style["visibility"] === "hidden" ? append = true : mark.setAttribute("opacity", 1);
//     }
//     // if (!append) document.getElementById("filter_mode").style['display'] = 'none';
// }


// function dragElement(elmnt, state, constrains) {
//     var pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;
//     elmnt.onmousedown = dragMouseDown;

//     function dragMouseDown(e) {
//         e = e || window.event;
//         // e.preventDefault();
//         // get the mouse cursor position at startup:
//         pos3 = e.clientX;
//         pos4 = e.clientY;
//         elmnt.onmouseup = closeDragElement;
//         // call a function whenever the cursor moves:
//         elmnt.onmousemove = elementDrag;
//     }

//     function elementDrag(e) {
//         e = e || window.event;
//         e.preventDefault();
//         // calculate the new cursor position:
//         pos1 = pos3 - e.clientX;
//         pos2 = pos4 - e.clientY;
//         pos3 = e.clientX;
//         pos4 = e.clientY;
//         // set the element's new position:
//         if (!constrains[1]) elmnt.setAttribute("y", elmnt.getAttribute("y") - pos2);
//         if (!constrains[0]) elmnt.setAttribute("x", elmnt.getAttribute("x") - pos1);

//         filter(
//             state,
//             +elmnt.getAttribute("x") + +state.svg.getBoundingClientRect().left,
//             +elmnt.getAttribute("y") + +state.svg.getBoundingClientRect().top,
//             elmnt.getAttribute("width"),
//             elmnt.getAttribute("height")
//         );
//     }

//     function closeDragElement() {
//         // stop moving when mouse button is released:
//         elmnt.onmouseup = null;
//         elmnt.onmousemove = null;
//     }
// }    

// export function brush(state, filter, unfilter) {
//     // if (SVG.state().svg_marks[0].nodeName === "path") {
//     //     return;
//     // }

//     let rect = document.createElementNS("http://www.w3.org/2000/svg", "rect");
//     rect.style["fill"] = "gray";
//     rect.setAttribute("opacity", 0.35)
//     rect.setAttribute("x", 0);
//     rect.setAttribute("y", 0);
//     rect.setAttribute("width", 0);
//     rect.setAttribute("height", 0);
//     rect.setAttribute("id", "brush-rect")
//     // rect.style['cursor'] = 'move';
//     // rect.style['strokeWidth'] = '2px';
//     rect.style['stroke'] = '#fff';
//     console.log(rect);

//     let svg = state.svg;
//     svg.appendChild(rect);

//     let mousedown = false,
//         constrains = [false, false];

//     function update_rect() {
//         if (+rect.getAttribute("width") === 0 || +rect.getAttribute("height") === 0) return;
//         if (constrains[0]) {
//             rect.setAttribute("x", state.xAxis.range[0]);
//             rect.setAttribute("width", state.xAxis.range[1] - state.xAxis.range[0]);
//         } else if (constrains[1]) {
//             rect.setAttribute("y", state.yAxis.range[1]);
//             rect.setAttribute("height", state.yAxis.range[0] - state.yAxis.range[1]);
//         }

//         filter(
//             state,
//             +rect.getAttribute("x") + +svg.getBoundingClientRect().left,
//             +rect.getAttribute("y") + +svg.getBoundingClientRect().top,
//             rect.getAttribute("width"),
//             rect.getAttribute("height")
//         );
//     }
    
//     function mousedown_callback(e) {
//         if (!state.interactions.brush.flag || state.interactions.brush.on_elem) return;
//         // let intersects = false;
//         //     for (const mark of SVG.state().svg_marks) {
//         //         if (mark.type === "line" || mark.type === "polygon") continue;
//         //         let bb = mark.getBoundingClientRect();
//         //         if (e.clientX >= +bb.left && e.clientX <= +bb.right && e.clientY >= +bb.top && e.clientY <= +bb.bottom) {
//         //             intersects = true;
//         //             break;
//         //         }
//         //     }

//         // if (intersects) return;

//         // SVG.disambiguate("brush");
//         // document.getElementById('pan_disam').style['display'] = 'block';

//         if (e.clientX - svg.getBoundingClientRect().left >= +rect.getAttribute("x") && 
//             e.clientX - svg.getBoundingClientRect().left <= +rect.getAttribute("x") + +rect.getAttribute("width") &&
//             e.clientY - svg.getBoundingClientRect().top >= +rect.getAttribute("y") &&
//             e.clientY - svg.getBoundingClientRect().top <= +rect.getAttribute("y") + +rect.getAttribute("height")) {
//             return;
//         }

//         state.interactions.brush.active = true;

//         var left_bound = state.svg.getBoundingClientRect().left;
//         var top_bound = state.svg.getBoundingClientRect().top;

//         let x_flag = e.clientX - left_bound > state.xAxis.range[0], 
//             y_flag = e.clientY - top_bound < state.yAxis.range[0];
        
//         let brush_Y = !x_flag && y_flag;
//         let brush_X = (x_flag && !y_flag) || 
//             ((state.svgMarks[0].type === "line" || state.svgMarks[0].type === "polyline" || state.svgMarks[0].type === "polygon") && !brush_Y && 
//             state.xAxis.ticks.length);

//         // let std = SVG.std();
//         // if (std < 0.5 && !brush_X && !brush_Y) {
//         //     brush_X = false;
//         //     brush_Y = true;
//         // } else if (std > 2 && !brush_X && !brush_Y) {
//         //     brush_X = true;
//         //     brush_Y = false;
//         // }

//         constrains[0] || brush_Y ? 
//             rect.setAttribute("width", state.xAxis.range[1] - state.xAxis.range[0]) : 
//             rect.setAttribute("width", 0);
//         constrains[1] || brush_X ? 
//             rect.setAttribute("height", state.yAxis.range[0] - state.yAxis.range[1]) :
//             rect.setAttribute("height", 0);

//         e.preventDefault();
//         mousedown = true;
//         constrains[0] || brush_Y ? 
//             rect.setAttribute("x", state.xAxis.range[0]) :
//             rect.setAttribute("x", e.clientX - svg.getBoundingClientRect().left);
//         constrains[1] || brush_X ? 
//             rect.setAttribute("y", state.yAxis.range[1]) :
//             rect.setAttribute("y", e.clientY - svg.getBoundingClientRect().top);

//         var keys = (e.ctrlKey ? " ctrl " : "") + (e.shiftKey ? " shift " : "") + (e.altKey ? " alt " : "");
//         // document.getElementById("logfile").innerHTML += e.type + " [" + keys + "] " + SVG.state().svg.id + " to brush [" +
//             // (!brush_X && !brush_Y ? "2D" : (brush_X ? "X-AXIS" : "Y-AXIS")) + "] <br/>";
//     }

//     function mousemove_callback(e) {
        
//         // var brush_shift = document.getElementById("brush-shift").className.split(" ").indexOf("bg-primary") > -1 &&
//         //     document.getElementById("brush-drag").className.split(" ").indexOf("bg-primary") <= -1;
//         // var brush_shift = false;
//         // if ((brush_shift && !e.shiftKey) || (!brush_shift && e.shiftKey)) return;
//         var left_bound = /*state.svgMarks[0].globalPosition.translate.x + */state.svg.getBoundingClientRect().left;
//         var top_bound = /*state.svgMarks[0].globalPosition.translate.y +*/ state.svg.getBoundingClientRect().top;

//         let x_flag = e.clientX - left_bound > state.xAxis.range[0], 
//             y_flag = e.clientY - top_bound < state.yAxis.range[0];
//         let brush_Y = !x_flag && y_flag;
//         let brush_X = (x_flag && !y_flag) ||
//             ((state.svgMarks[0].type === "line" || state.svgMarks[0].type === "polyline" || state.svgMarks[0].type === "polygon") && !brush_Y &&
//             state.xAxis.ticks.length);

//         if (mousedown) {
//             let tooltips = document.querySelectorAll(".tooltip");
//             if (tooltips.length) tooltips.forEach(d => d.style['visibility'] = 'hidden');
//             e.preventDefault();
//             let width = e.clientX - rect.getAttribute("x") - svg.getBoundingClientRect().left;
//             let height = e.clientY - rect.getAttribute("y") - svg.getBoundingClientRect().top;
//             constrains[0] || brush_Y ? 
//                 rect.setAttribute("width", state.xAxis.range[1] - state.xAxis.range[0]) :
//                 rect.setAttribute("width", Math.abs(width));
//             constrains[1] || brush_X ?
//                 rect.setAttribute("height", state.yAxis.range[0] - state.yAxis.range[1]) :
//                 rect.setAttribute("height", Math.abs(height));
            

//             let x_translate = !brush_Y && width < 0 ? width : 0;
//             let y_translate = !brush_X && height < 0 ? height : 0;
//             rect.setAttribute("transform", "translate(" + x_translate + "," + y_translate + ")");
//             // if (SVG.state().svg_marks[0].type !== "line" && SVG.state().svg_marks[0].type !== "polygon") {
//                 filter(
//                     state,
//                     +rect.getAttribute("x") + +svg.getBoundingClientRect().left + x_translate,
//                     +rect.getAttribute("y") + +svg.getBoundingClientRect().top + y_translate,
//                     Math.abs(+rect.getAttribute("width")),
//                     Math.abs(+rect.getAttribute("height")),
//                     e.ctrlKey || e.metaKey || e.altKey || e.shiftKey
//                 );
//             // }
//         }
//     };

//     function mouseup_callback(e) {
//         if (!state.interactions.brush.active) return;
//         state.interactions.brush.active = false;
//         mousedown = false;
//         if (+rect.getAttribute("width") === 0 || +rect.getAttribute("height") === 0) { 
//             unfilter(state);
//             // document.getElementById('pan_disam').style['display'] = 'none';
//             // SVG.disambiguate("brush", true);
//             // d3.selectAll(".brush_tooltip").remove();
//             // document.getElementById("logfile").innerHTML += "reset brush <br/>"
//         } else {
//             rect.setAttribute("width", 0);
//             rect.setAttribute("height", 0);
//         }
//     };

//     svg.addEventListener("mousedown", mousedown_callback);
//     svg.addEventListener("mousemove", mousemove_callback);
//     svg.addEventListener("mouseup", mouseup_callback);

//     // control.addEventListener('change', function() {
//     //     if (!this.checked) { 
//     //         unfilter(state);
//     //         rect.setAttribute("width", 0);
//     //         rect.setAttribute("height", 0);
//     //     }

//     //     this.checked ? svg.addEventListener("mousedown", mousedown_callback) : svg.removeEventListener("mousedown", mousedown_callback);
//     //     this.checked ? svg.addEventListener("mousemove", mousemove_callback) : svg.removeEventListener("mousemove", mousemove_callback);
//     //     this.checked ? svg.addEventListener("mouseup", mouseup_callback) : svg.removeEventListener("mouseup", mouseup_callback);
//     // });

//     document.querySelectorAll('ul.brush a.axis').forEach(d => d.addEventListener('click', function(event) {
//         switch(event.target.innerHTML) {
//             case "2D":
//                 constrains[0] = constrains[1] = false;
//                 break;
//             case "X axis":
//                 constrains[0] = false;
//                 constrains[1] = true;
//                 break;
//             case "Y axis":
//                 constrains[0] = true;
//                 constrains[1] = false;
//                 break;
//         }
//         update_rect();
//     }));

//     dragElement(rect, state, constrains);
// }

// <div id='modebar' style='margin-left:10px;margin-bottom:5px;float:center;'>
//     <div style='display:flex;'>
//         <div id='brushMode' style="margin-left:10px;opacity:1;display:block;cursor:pointer;" data-bs-toggle="tooltip" data-bs-placement="bottom" title="Brush area">
//             <!-- <svg xmlns="http://www.w3.org/2000/svg" stroke-width="15" width="16" height="16" fill="currentColor" class="bi bi-dash-square-dotted" viewBox="0 0 16 16">
//                 <path d="M2.5 0c-.166 0-.33.016-.487.048l.194.98A1.51 1.51 0 0 1 2.5 1h.458V0H2.5zm2.292 0h-.917v1h.917V0zm1.833 0h-.917v1h.917V0zm1.833 0h-.916v1h.916V0zm1.834 0h-.917v1h.917V0zm1.833 0h-.917v1h.917V0zM13.5 0h-.458v1h.458c.1 0 .199.01.293.029l.194-.981A2.51 2.51 0 0 0 13.5 0zm2.079 1.11a2.511 2.511 0 0 0-.69-.689l-.556.831c.164.11.305.251.415.415l.83-.556zM1.11.421a2.511 2.511 0 0 0-.689.69l.831.556c.11-.164.251-.305.415-.415L1.11.422zM16 2.5c0-.166-.016-.33-.048-.487l-.98.194c.018.094.028.192.028.293v.458h1V2.5zM.048 2.013A2.51 2.51 0 0 0 0 2.5v.458h1V2.5c0-.1.01-.199.029-.293l-.981-.194zM0 3.875v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zM0 5.708v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zM0 7.542v.916h1v-.916H0zm15 .916h1v-.916h-1v.916zM0 9.375v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zm-16 .916v.917h1v-.917H0zm16 .917v-.917h-1v.917h1zm-16 .917v.458c0 .166.016.33.048.487l.98-.194A1.51 1.51 0 0 1 1 13.5v-.458H0zm16 .458v-.458h-1v.458c0 .1-.01.199-.029.293l.981.194c.032-.158.048-.32.048-.487zM.421 14.89c.183.272.417.506.69.689l.556-.831a1.51 1.51 0 0 1-.415-.415l-.83.556zm14.469.689c.272-.183.506-.417.689-.69l-.831-.556c-.11.164-.251.305-.415.415l.556.83zm-12.877.373c.158.032.32.048.487.048h.458v-1H2.5c-.1 0-.199-.01-.293-.029l-.194.981zM13.5 16c.166 0 .33-.016.487-.048l-.194-.98A1.51 1.51 0 0 1 13.5 15h-.458v1h.458zm-9.625 0h.917v-1h-.917v1zm1.833 0h.917v-1h-.917v1zm1.834 0h.916v-1h-.916v1zm1.833 0h.917v-1h-.917v1zm1.833 0h.917v-1h-.917v1zM4.5 7.5a.5.5 0 0 0 0 1"/>
//               </svg> -->
//               <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-bounding-box" viewBox="0 0 16 16">
//                 <path d="M5 2V0H0v5h2v6H0v5h5v-2h6v2h5v-5h-2V5h2V0h-5v2H5zm6 1v2h2v6h-2v2H5v-2H3V5h2V3h6zm1-2h3v3h-3V1zm3 11v3h-3v-3h3zM4 15H1v-3h3v3zM1 4V1h3v3H1z"/>
//               </svg>
//         </div>
//         <div id='panMode' style="margin-left:10px;display:block;opacity:0.4;cursor:pointer;" data-bs-toggle="tooltip" data-bs-placement="bottom" title="Pan">
//             <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrows-move" viewBox="0 0 16 16">
//             <path fill-rule="evenodd" d="M7.646.146a.5.5 0 0 1 .708 0l2 2a.5.5 0 0 1-.708.708L8.5 1.707V5.5a.5.5 0 0 1-1 0V1.707L6.354 2.854a.5.5 0 1 1-.708-.708l2-2zM8 10a.5.5 0 0 1 .5.5v3.793l1.146-1.147a.5.5 0 0 1 .708.708l-2 2a.5.5 0 0 1-.708 0l-2-2a.5.5 0 0 1 .708-.708L7.5 14.293V10.5A.5.5 0 0 1 8 10zM.146 8.354a.5.5 0 0 1 0-.708l2-2a.5.5 0 1 1 .708.708L1.707 7.5H5.5a.5.5 0 0 1 0 1H1.707l1.147 1.146a.5.5 0 0 1-.708.708l-2-2zM10 8a.5.5 0 0 1 .5-.5h3.793l-1.147-1.146a.5.5 0 0 1 .708-.708l2 2a.5.5 0 0 1 0 .708l-2 2a.5.5 0 0 1-.708-.708L14.293 8.5H10.5A.5.5 0 0 1 10 8z"/>
//         </svg></div>

//         <div id='annotateMode' style="margin-left:10px;cursor:pointer;opacity:0.4;" data-bs-toggle="tooltip" data-bs-placement="bottom" title="Annotate">
//             <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chat-text" viewBox="0 0 16 16">
//                 <path d="M2.678 11.894a1 1 0 0 1 .287.801 10.97 10.97 0 0 1-.398 2c1.395-.323 2.247-.697 2.634-.893a1 1 0 0 1 .71-.074A8.06 8.06 0 0 0 8 14c3.996 0 7-2.807 7-6 0-3.192-3.004-6-7-6S1 4.808 1 8c0 1.468.617 2.83 1.678 3.894zm-.493 3.905a21.682 21.682 0 0 1-.713.129c-.2.032-.352-.176-.273-.362a9.68 9.68 0 0 0 .244-.637l.003-.01c.248-.72.45-1.548.524-2.319C.743 11.37 0 9.76 0 8c0-3.866 3.582-7 8-7s8 3.134 8 7-3.582 7-8 7a9.06 9.06 0 0 1-2.347-.306c-.52.263-1.639.742-3.468 1.105z"/>
//                 <path d="M4 5.5a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5zM4 8a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7A.5.5 0 0 1 4 8zm0 2.5a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 0 1h-4a.5.5 0 0 1-.5-.5z"/>
//               </svg>
//         </div>

//         <!-- <div id='zoomMode' style="margin-left:10px;display:none;cursor:block;" data-bs-toggle="tooltip" data-bs-placement="bottom" title="Zoom">
//             <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-search" viewBox="0 0 16 16">
//             <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z"/>
//           </svg></div> -->
//           <div id='filterMode' style="margin-left:10px;display:none;opacity:0.4;cursor:pointer;" data-bs-toggle="tooltip" data-bs-placement="bottom" title="Filter">
//             <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-filter" viewBox="0 0 16 16">
//                 <path d="M6 10.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 0 1h-3a.5.5 0 0 1-.5-.5zm-2-3a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5zm-2-3a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11a.5.5 0 0 1-.5-.5z"/>
//                 </svg>
//         </div>
//         <!-- <div style="margin-left:10px;" data-bs-toggle="tooltip" data-bs-placement="bottom" title="Undo">
//             <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-reply-fill" viewBox="0 0 16 16">
//                 <path d="M5.921 11.9 1.353 8.62a.719.719 0 0 1 0-1.238L5.921 4.1A.716.716 0 0 1 7 4.719V6c1.5 0 6 0 7 8-2.5-4.5-7-4-7-4v1.281c0 .56-.606.898-1.079.62z"/>
//               </svg>
//         </div> -->
//         <!-- <div id="menu_mode" style="margin-left:10px;cursor:pointer;display:block;" data-bs-toggle="tooltip" data-bs-placement="bottom" title="Menu">
//             <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-gear" viewBox="0 0 16 16">
//                 <path d="M8 4.754a3.246 3.246 0 1 0 0 6.492 3.246 3.246 0 0 0 0-6.492zM5.754 8a2.246 2.246 0 1 1 4.492 0 2.246 2.246 0 0 1-4.492 0z"/>
//                 <path d="M9.796 1.343c-.527-1.79-3.065-1.79-3.592 0l-.094.319a.873.873 0 0 1-1.255.52l-.292-.16c-1.64-.892-3.433.902-2.54 2.541l.159.292a.873.873 0 0 1-.52 1.255l-.319.094c-1.79.527-1.79 3.065 0 3.592l.319.094a.873.873 0 0 1 .52 1.255l-.16.292c-.892 1.64.901 3.434 2.541 2.54l.292-.159a.873.873 0 0 1 1.255.52l.094.319c.527 1.79 3.065 1.79 3.592 0l.094-.319a.873.873 0 0 1 1.255-.52l.292.16c1.64.893 3.434-.902 2.54-2.541l-.159-.292a.873.873 0 0 1 .52-1.255l.319-.094c1.79-.527 1.79-3.065 0-3.592l-.319-.094a.873.873 0 0 1-.52-1.255l.16-.292c.893-1.64-.902-3.433-2.541-2.54l-.292.159a.873.873 0 0 1-1.255-.52l-.094-.319zm-2.633.283c.246-.835 1.428-.835 1.674 0l.094.319a1.873 1.873 0 0 0 2.693 1.115l.291-.16c.764-.415 1.6.42 1.184 1.185l-.159.292a1.873 1.873 0 0 0 1.116 2.692l.318.094c.835.246.835 1.428 0 1.674l-.319.094a1.873 1.873 0 0 0-1.115 2.693l.16.291c.415.764-.42 1.6-1.185 1.184l-.291-.159a1.873 1.873 0 0 0-2.693 1.116l-.094.318c-.246.835-1.428.835-1.674 0l-.094-.319a1.873 1.873 0 0 0-2.692-1.115l-.292.16c-.764.415-1.6-.42-1.184-1.185l.159-.291A1.873 1.873 0 0 0 1.945 8.93l-.319-.094c-.835-.246-.835-1.428 0-1.674l.319-.094A1.873 1.873 0 0 0 3.06 4.377l-.16-.292c-.415-.764.42-1.6 1.185-1.184l.292.159a1.873 1.873 0 0 0 2.692-1.115l.094-.319z"/>
//               </svg>
//         </div> -->
//     </div>
// </div>


// function iterateAggregates(state1, state2, aggregateFields, encoding1, encoding2) {
//     const fields = encoding1.type === CategoricalColorLegend ? aggregateFields.map(d => d.title.innerHTML) : [encoding1.title.innerHTML];
//     const marks = state1.svgMarks.map(d => d.__inferred__data__);
//     const totals = state2.svgMarks.map(d => d.__inferred__data__[encoding2.title.innerHTML]);
    
//     if (encoding1.type === CategoricalColorLegend) {
//         var groups = Array.from(group(marks, d => d[encoding1.title.innerHTML]).values());
//     } else {
//         var groups = [marks];
//     }

//     const epsilon = encoding2.domain ? Math.abs(encoding2.domain[1] - encoding2.domain[0]) * 1e-2 : 1e-2;
//     for (const [aggregateName, aggregateFn] of Object.entries(AGGREGATIONS)) {
//         for (const field of fields) {
//             // if (aggregateFn === AGGREGATIONS.SUM) {
//             //     var epsilon = marks.length;
//             // } else if (aggregateFn === AGGREGATIONS.MEAN) {
//             //     var epsilon = 1;
//             // } else {
//             //     var epsilon = encoding2.domain ? Math.abs(encoding2.domain[1] - encoding2.domain[0]) * 0.01 : 0.01;
//             // }

//             const vals = groups.map(g => aggregateFn(g.map(d => d[field])));
//             const candidates = [];
//             // console.log(encoding1.title.innerHTML, encoding2.title.innerHTML, aggregateName, groups, field, totals, vals, epsilon)
//             if (vals.filter(function(d) {
//                     let matched = false;
//                     const _totals = totals.filter(function(e, i) {
//                         if (!matched && !candidates.includes(i) && Math.abs(e - d) <= epsilon) {
//                             matched = true;
//                             candidates.push(i);
//                             return true;
//                         }
//                         return false;
//                     });
//                     return _totals.length;
//                 }).length === totals.length) {
//                     return [MATCH_TYPES.AGGREGATE, encoding1.title.innerHTML, field, aggregateName, aggregateFields];
//             }
//         }
//     }

//     return [MATCH_TYPES.NONE, null, null, null, null];
// }

// function inferMapping(state1, state2, state1AggregateFields, state2AggregateFields, encoding1, encoding2) {
//     const title1 = encoding1.title.innerHTML.toLowerCase();
//     const title2 = encoding2.title.innerHTML.toLowerCase();

//     if (title1 === title2) {
//         return {
//             encoding1: encoding1,
//             encoding2: encoding2,
//             state1: state1,
//             state2: state2,
//             match: MATCH_TYPES.ATTRIBUTE
//         };
//     }

//     const [forwardAggregates, fGroup, fMatch, fFn, fFields] = iterateAggregates(state1, state2, state1AggregateFields, encoding1, encoding2);
//     const [backwardsAggregates, bGroup, bMatch, bFn, bFields] = iterateAggregates(state2, state1, state2AggregateFields, encoding2, encoding1);
//     return {
//         encoding1: forwardAggregates ? encoding1 : encoding2,
//         encoding2: forwardAggregates ? encoding2 : encoding1,
//         state1: forwardAggregates ? state1 : state2,
//         state2: forwardAggregates ? state2 : state1,
//         match: forwardAggregates || backwardsAggregates,
//         fn: fFn || bFn,
//         groupBy: fGroup || bGroup,
//         matchBy: fMatch || bMatch,
//         fields: fFields || bFields
//     }; 
// }

// function iterateEncodings(states, encodings) {
//     const matches = [];

//     for (let i = 0; i < encodings.length; ++i) {
//         for (let j = i + 1; j < encodings.length; ++j) {
//             for (const encoding1 of encodings[i]) {
//                 for (const encoding2 of encodings[j]) {
//                     const obj = inferMapping(
//                         states[i], states[j], 
//                         encodings[i].filter(d => d !== encoding1), 
//                         encodings[j].filter(d => d !== encoding2), 
//                         encoding1, encoding2
//                     );
//                     if (obj.match !== MATCH_TYPES.NONE) matches.push(obj);
//                 }
//             }
//         }
//     }

//     return matches;
// }

// function constructMappings(linkings) {
//     const linkMap = new WeakMap();
//     for (const link of linkings) {
//         const {encoding1, encoding2, state1, state2, fields} = link;

//         if (link.match === MATCH_TYPES.ATTRIBUTE) { // Direct link
//             const e1Marks = encoding1.type ? encoding1.marks : state1.svgMarks;
//             const e2Marks = encoding2.type ? encoding2.marks : state2.svgMarks;
            
//             for (const e1Mark of e1Marks) {
//                 const m1 = encoding1.type ? e1Mark.mark : e1Mark;
//                 const e1Match = encoding1.type ? e1Mark.label.innerHTML : e1Mark.__inferred__data__[encoding1.title.innerHTML];

//                 const e2Matches = e2Marks.filter(d => (encoding2.type ? d.label.innerHTML : d.__inferred__data__[encoding2.title.innerHTML]) === e1Match);
//                 const m2 = encoding2.type ? e2Matches.map(d => d.mark) : e2Matches;

//                 linkMap.set(m1, (linkMap.has(m1) ? [...linkMap.get(m1), ...m2] : m2));
//                 for (const e2Mark of m2) {
//                     linkMap.has(e2Mark) ? linkMap.get(e2Mark).push(m1) : linkMap.set(e2Mark, [m1]);
//                 }
//             }
//         } else { // Aggregate link
//             for (const field of fields) {
//                 const val = {encoding: encoding2, state: state2, fn: link.fn, groupBy: link.groupBy, matchBy: link.matchBy};
//                 if (field.type) {
//                     for (const {mark} of field.marks) {
//                         linkMap.set(mark, linkMap.has(mark) ? [...linkMap.get(mark), val] : [val]);
//                     }
//                 } else {
//                     linkMap.set(field, linkMap.has(field) ? [...linkMap.get(field), val] : [val]);
//                 }
//             }
//         }
//     }
//     console.log(linkMap)
//     return linkMap;
// }

